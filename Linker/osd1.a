;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Professional
;Automatic Program Generator
;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 2014-01-27
;Author  : NeVaDa
;Company :
;Comments:
;
;
;Chip type               : ATxmega32A4
;Program type            : Application
;AVR Core Clock frequency: 2.000000 MHz
;Memory model            : Small
;Data Stack size         : 1024
;*****************************************************/
;
;// I/O Registers definitions
;#include <io.h>
;
;// Standard Input/Output functions
;#include <stdio.h>
;#include <delay.h>
;#include <stdio.h>
;#include <string.h>
;
;// Declare your global variables here
;// Array of character addresses in MAX7456
;const char OSDchr[256]={  0xF2,  0xF1,  0xF0,  0xEF, 0xEE,  0xED, 0xF3,            // 0-6 progress bar
;  0xFB,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,      // 7-33
;  0x48, 0,0,0,0, 0x46,0x3F,0x40, 0,0, 0x45,0x49,0x41,0x47,                         // 34; 35-38; 39-41; 42-43; 44-47
;  0x0A, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x44, 0x43, 0x4A,    // 48-60
;  0, 0x4B, 0x42, 0x4C,                                                             // 61; 62-64
;  0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,    // 65-77  A-M
;  0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24,    // 78-90  N-Z
;  0, 0, 0, 0, 0, 0,                                                                // 91-96
;  0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30, 0x31,    // 97-109   a-m
;  0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E     // 110-122  n-z
;};

	.DSEG
;int col_pointer=1, row_pointer=1, title_pointer;
;int ten_ms;
;
;char ch[30]="";
;unsigned char a,b,c,d;
;long int sum;
;bit flag_com=0;
;
;//////////////////////////////////////////////////////////////encorder///////////////////////////////////////////////////////////////////
;#define SELECT_MDR0 0b00001000     // Select MDR0
;#define SELECT_MDR1 0b00010000     // Select MDR1
;#define SELECT_DTR  0b00011000     // Select DTR
;#define SELECT_CNTR 0b00100000     // Select CNTR
;#define SELECT_OTR  0b00101000     // Select OTR
;#define SELECT_STR  0b00110000     // Select STR
;
;#define CLR_REG     0b00000000     // CLR  register
;#define RD_REG      0b01000000     // RD   register
;#define WR_REG      0b10000000     // WR   register
;#define LOAD_REG    0b11000000     // LOAD register
;#define NON_QUAD            0b00000000      // non-quadrature counter mode.
;#define X1_QUAD             0b00000001      // x1 quadrature counter mode.
;#define X2_QUAD             0b00000010      // x2 quadrature counter mode.
;#define X4_QUAD             0b00000011      // x4 quadrature counter mode.
;#define FREE_RUN            0b00000000      // free-running count mode.
;#define SINGLE_CYCLE        0b00000100      // single-cycle count mode.
;#define RANGE_LIMIT         0b00001000      // range-limit count mode.
;#define MODULO_N            0b00001100      // modulo-n count mode.
;#define DISABLE_INDEX       0b00000000      // disable index.
;#define INDEX_AS_LOAD_CNTR  0b00010000      // configure index as the "load CNTR" input(clears CNTR to 0).
;#define INDEX_AS_RESET_CNTR 0b00100000      // configure index as the "reset CNTR" input(clears CNTR to 0).
;#define INDEX_AS_LOAD_OTR   0b00110000      // configure index as the "load OTR" input(transfer CNTR to OTR).
;#define ASYCHRONOUS_INDEX   0b00000000      // Asynchronous index
;#define SYNCHRONOUS_INDEX   0b01000000      // Synchoronous index
;#define FILTER_CDF_1        0b00000000      // Filter clock division factor = 1
;#define FILTER_CDF_2        0b10000000      // Filter clock division factor = 2
;#define FOUR_BYTE_COUNT_MODE    0b00000000       // 4-byte counter mode
;#define THREE_BYTE_COUNT_MODE   0b00000001       // 3-byte counter mode
;#define TWO_BYTE_COUNT_MODE     0b00000010       // 2-byte counter mode
;#define ENABLE_COUNTING         0b00000000       // Enable counting
;#define DISABLE_COUNTING        0b00000100       // Disable counting
;#define FLAG_ON_IDX             0b00010000       // FLAG on IDX (B4 of STR)
;#define FLAG_ON_CMP             0b00100000       // FLAG on CMP (B5 of STR)
;#define FLAG_ON_BW              0b01000000       // FLAG on BW (B6 of STR)
;#define FLAG_ON_CY              0b10000000       // FLAG on CY (B7 of STR)
;#define LS7366_SS_H_L  PORTD.OUT = 0x00;    // Device Select or Start
;#define LS7366_SS_L_H  PORTD.OUT = 0x10;    // Device Unselect or End
;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
;// System Clocks initialization
;
;
;void system_clocks_init(void)
; 0000 0061 {

	.CSEG
;PCODE: $00000000 VOL: 0
;PCODE: $00000001 VOL: 0
; 0000 0062 unsigned char n,s;
; 0000 0063 
; 0000 0064 // Optimize for speed
; 0000 0065 #pragma optsize-
; 0000 0066 // Save interrupts enabled/disabled state
; 0000 0067 s=SREG;
;PCODE: $00000002 VOL: 0
;PCODE: $00000003 VOL: 0
;	n -> R17
;	s -> R16
;PCODE: $00000004 VOL: 0
;PCODE: $00000005 VOL: 0
; 0000 0068 // Disable interrupts
; 0000 0069 #asm("cli")
;PCODE: $00000006 VOL: 0
	cli
;PCODE: $00000007 VOL: 0
; 0000 006A 
; 0000 006B // Internal 2 MHz RC oscillator initialization
; 0000 006C // Enable the internal 2 MHz RC oscillator
; 0000 006D OSC.CTRL|=OSC_RC2MEN_bm;
;PCODE: $00000008 VOL: 1
;PCODE: $00000009 VOL: 0
;PCODE: $0000000A VOL: 1
; 0000 006E 
; 0000 006F // System Clock prescaler A division factor: 1
; 0000 0070 // System Clock prescalers B & C division factors: B:1, C:1
; 0000 0071 // ClkPer4: 2000.000 kHz
; 0000 0072 // ClkPer2: 2000.000 kHz
; 0000 0073 // ClkPer:  2000.000 kHz
; 0000 0074 // ClkCPU:  2000.000 kHz
; 0000 0075 n=(CLK.PSCTRL & (~(CLK_PSADIV_gm | CLK_PSBCDIV1_bm | CLK_PSBCDIV0_bm))) |
; 0000 0076 	CLK_PSADIV_1_gc | CLK_PSBCDIV_1_1_gc;
;PCODE: $0000000B VOL: 1
;PCODE: $0000000C VOL: 0
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 0077 CCP=CCP_IOREG_gc;
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0078 CLK.PSCTRL=n;
;PCODE: $00000012 VOL: 1
;PCODE: $00000013 VOL: 0
; 0000 0079 
; 0000 007A // Disable the autocalibration of the internal 2 MHz RC oscillator
; 0000 007B DFLLRC2M.CTRL&= ~DFLL_ENABLE_bm;
;PCODE: $00000014 VOL: 1
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 1
; 0000 007C 
; 0000 007D // Wait for the internal 2 MHz RC oscillator to stabilize
; 0000 007E while ((OSC.STATUS & OSC_RC2MRDY_bm)==0);
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 1
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 007F 
; 0000 0080 // Select the system clock source: 2 MHz Internal RC Osc.
; 0000 0081 n=(CLK.CTRL & (~CLK_SCLKSEL_gm)) | CLK_SCLKSEL_RC2M_gc;
;PCODE: $0000001D VOL: 1
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0082 CCP=CCP_IOREG_gc;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0083 CLK.CTRL=n;
;PCODE: $00000023 VOL: 1
;PCODE: $00000024 VOL: 0
; 0000 0084 
; 0000 0085 // Disable the unused oscillators: 32 MHz, 32 kHz, external clock/crystal oscillator, PLL
; 0000 0086 OSC.CTRL&= ~(OSC_RC32MEN_bm | OSC_RC32KEN_bm | OSC_XOSCEN_bm | OSC_PLLEN_bm);
;PCODE: $00000025 VOL: 1
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 1
; 0000 0087 
; 0000 0088 // Peripheral Clock output: Disabled
; 0000 0089 PORTCFG.CLKEVOUT=(PORTCFG.CLKEVOUT & (~PORTCFG_CLKOUT_gm)) | PORTCFG_CLKOUT_OFF_gc;
;PCODE: $00000028 VOL: 1
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 1
; 0000 008A 
; 0000 008B // Restore interrupts enabled/disabled state
; 0000 008C SREG=s;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 008D // Restore optimization for size if needed
; 0000 008E #pragma optsize_default
; 0000 008F }
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;
;// Watchdog Timer initialization
;void watchdog_init(void)
; 0000 0093 {
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0094 unsigned char s,n;
; 0000 0095 
; 0000 0096 // Optimize for speed
; 0000 0097 #pragma optsize-
; 0000 0098 // Save interrupts enabled/disabled state
; 0000 0099 s=SREG;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;	s -> R17
;	n -> R16
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 009A // Disable interrupts
; 0000 009B #asm("cli")
;PCODE: $00000037 VOL: 0
	cli
;PCODE: $00000038 VOL: 0
; 0000 009C 
; 0000 009D // Watchdog Timer: Off
; 0000 009E n=(WDT.CTRL & (~WDT_ENABLE_bm)) | WDT_CEN_bm;
;PCODE: $00000039 VOL: 1
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 009F CCP=CCP_IOREG_gc;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 00A0 WDT.CTRL=n;
;PCODE: $0000003F VOL: 1
;PCODE: $00000040 VOL: 0
; 0000 00A1 // Watchdog window mode: Off
; 0000 00A2 n=(WDT.WINCTRL & (~WDT_WEN_bm)) | WDT_WCEN_bm;
;PCODE: $00000041 VOL: 1
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 00A3 CCP=CCP_IOREG_gc;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 00A4 WDT.WINCTRL=n;
;PCODE: $00000047 VOL: 1
;PCODE: $00000048 VOL: 0
; 0000 00A5 
; 0000 00A6 // Restore interrupts enabled/disabled state
; 0000 00A7 SREG=s;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 00A8 // Restore optimization for size if needed
; 0000 00A9 #pragma optsize_default
; 0000 00AA }
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;
;// Event System initialization
;void event_system_init(void)
; 0000 00AE {
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 00AF // Event System Channel 0 source: None
; 0000 00B0 EVSYS.CH0MUX=EVSYS_CHMUX_OFF_gc;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 1
; 0000 00B1 // Event System Channel 1 source: None
; 0000 00B2 EVSYS.CH1MUX=EVSYS_CHMUX_OFF_gc;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 1
; 0000 00B3 // Event System Channel 2 source: None
; 0000 00B4 EVSYS.CH2MUX=EVSYS_CHMUX_OFF_gc;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 1
; 0000 00B5 // Event System Channel 3 source: None
; 0000 00B6 EVSYS.CH3MUX=EVSYS_CHMUX_OFF_gc;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 1
; 0000 00B7 // Event System Channel 4 source: None
; 0000 00B8 EVSYS.CH4MUX=EVSYS_CHMUX_OFF_gc;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 1
; 0000 00B9 // Event System Channel 5 source: None
; 0000 00BA EVSYS.CH5MUX=EVSYS_CHMUX_OFF_gc;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 1
; 0000 00BB // Event System Channel 6 source: None
; 0000 00BC EVSYS.CH6MUX=EVSYS_CHMUX_OFF_gc;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 1
; 0000 00BD // Event System Channel 7 source: None
; 0000 00BE EVSYS.CH7MUX=EVSYS_CHMUX_OFF_gc;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 1
; 0000 00BF 
; 0000 00C0 // Event System Channel 0 Digital Filter Coefficient: 1 Sample
; 0000 00C1 EVSYS.CH0CTRL=(EVSYS.CH0CTRL & (~(EVSYS_QDIRM_gm | EVSYS_QDIEN_bm | EVSYS_QDEN_bm | EVSYS_DIGFILT_gm))) |
; 0000 00C2 	EVSYS_DIGFILT_1SAMPLE_gc;
;PCODE: $00000060 VOL: 1
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 1
; 0000 00C3 // Event System Channel 1 Digital Filter Coefficient: 1 Sample
; 0000 00C4 EVSYS.CH1CTRL=EVSYS_DIGFILT_1SAMPLE_gc;
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 1
; 0000 00C5 // Event System Channel 2 Digital Filter Coefficient: 1 Sample
; 0000 00C6 EVSYS.CH2CTRL=(EVSYS.CH2CTRL & (~(EVSYS_QDIRM_gm | EVSYS_QDIEN_bm | EVSYS_QDEN_bm | EVSYS_DIGFILT_gm))) |
; 0000 00C7 	EVSYS_DIGFILT_1SAMPLE_gc;
;PCODE: $00000066 VOL: 1
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 1
; 0000 00C8 // Event System Channel 3 Digital Filter Coefficient: 1 Sample
; 0000 00C9 EVSYS.CH3CTRL=EVSYS_DIGFILT_1SAMPLE_gc;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 1
; 0000 00CA // Event System Channel 4 Digital Filter Coefficient: 1 Sample
; 0000 00CB EVSYS.CH4CTRL=(EVSYS.CH4CTRL & (~(EVSYS_QDIRM_gm | EVSYS_QDIEN_bm | EVSYS_QDEN_bm | EVSYS_DIGFILT_gm))) |
; 0000 00CC 	EVSYS_DIGFILT_1SAMPLE_gc;
;PCODE: $0000006C VOL: 1
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 1
; 0000 00CD // Event System Channel 5 Digital Filter Coefficient: 1 Sample
; 0000 00CE EVSYS.CH5CTRL=EVSYS_DIGFILT_1SAMPLE_gc;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 1
; 0000 00CF // Event System Channel 6 Digital Filter Coefficient: 1 Sample
; 0000 00D0 EVSYS.CH6CTRL=EVSYS_DIGFILT_1SAMPLE_gc;
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 1
; 0000 00D1 // Event System Channel 7 Digital Filter Coefficient: 1 Sample
; 0000 00D2 EVSYS.CH7CTRL=EVSYS_DIGFILT_1SAMPLE_gc;
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 1
; 0000 00D3 
; 0000 00D4 // Event System Channel 0 output: Disabled
; 0000 00D5 // Note: the correct direction for the Event System Channel 0 output
; 0000 00D6 // is configured in the ports_init function
; 0000 00D7 PORTCFG.CLKEVOUT=(PORTCFG.CLKEVOUT & (~PORTCFG_EVOUT_gm)) | PORTCFG_EVOUT_OFF_gc;
;PCODE: $00000076 VOL: 1
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 1
; 0000 00D8 }
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;
;// Ports initialization
;void ports_init(void)
; 0000 00DC {
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 00DD // PORTA initialization
; 0000 00DE // OUT register
; 0000 00DF PORTA.OUT=0x00;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 1
; 0000 00E0 // Bit0: Input
; 0000 00E1 // Bit1: Input
; 0000 00E2 // Bit2: Input
; 0000 00E3 // Bit3: Input
; 0000 00E4 // Bit4: Input
; 0000 00E5 // Bit5: Input
; 0000 00E6 // Bit6: Input
; 0000 00E7 // Bit7: Input
; 0000 00E8 PORTA.DIR=0x00;
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 1
; 0000 00E9 // Bit0 Output/Pull configuration: Totempole/No
; 0000 00EA // Bit0 Input/Sense configuration: Sense both edges
; 0000 00EB // Bit0 inverted: Off
; 0000 00EC // Bit0 slew rate limitation: Off
; 0000 00ED PORTA.PIN0CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 1
; 0000 00EE // Bit1 Output/Pull configuration: Totempole/No
; 0000 00EF // Bit1 Input/Sense configuration: Sense both edges
; 0000 00F0 // Bit1 inverted: Off
; 0000 00F1 // Bit1 slew rate limitation: Off
; 0000 00F2 PORTA.PIN1CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 1
; 0000 00F3 // Bit2 Output/Pull configuration: Totempole/No
; 0000 00F4 // Bit2 Input/Sense configuration: Sense both edges
; 0000 00F5 // Bit2 inverted: Off
; 0000 00F6 // Bit2 slew rate limitation: Off
; 0000 00F7 PORTA.PIN2CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 1
; 0000 00F8 // Bit3 Output/Pull configuration: Totempole/No
; 0000 00F9 // Bit3 Input/Sense configuration: Sense both edges
; 0000 00FA // Bit3 inverted: Off
; 0000 00FB // Bit3 slew rate limitation: Off
; 0000 00FC PORTA.PIN3CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 1
; 0000 00FD // Bit4 Output/Pull configuration: Totempole/No
; 0000 00FE // Bit4 Input/Sense configuration: Sense both edges
; 0000 00FF // Bit4 inverted: Off
; 0000 0100 // Bit4 slew rate limitation: Off
; 0000 0101 PORTA.PIN4CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 1
; 0000 0102 // Bit5 Output/Pull configuration: Totempole/No
; 0000 0103 // Bit5 Input/Sense configuration: Sense both edges
; 0000 0104 // Bit5 inverted: Off
; 0000 0105 // Bit5 slew rate limitation: Off
; 0000 0106 PORTA.PIN5CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 1
; 0000 0107 // Bit6 Output/Pull configuration: Totempole/No
; 0000 0108 // Bit6 Input/Sense configuration: Sense both edges
; 0000 0109 // Bit6 inverted: Off
; 0000 010A // Bit6 slew rate limitation: Off
; 0000 010B PORTA.PIN6CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 1
; 0000 010C // Bit7 Output/Pull configuration: Totempole/No
; 0000 010D // Bit7 Input/Sense configuration: Sense both edges
; 0000 010E // Bit7 inverted: Off
; 0000 010F // Bit7 slew rate limitation: Off
; 0000 0110 PORTA.PIN7CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 1
; 0000 0111 // Interrupt 0 level: Disabled
; 0000 0112 // Interrupt 1 level: Disabled
; 0000 0113 PORTA.INTCTRL=(PORTA.INTCTRL & (~(PORT_INT1LVL_gm | PORT_INT0LVL_gm))) |
; 0000 0114 	PORT_INT1LVL_OFF_gc | PORT_INT0LVL_OFF_gc;
;PCODE: $00000092 VOL: 1
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 1
; 0000 0115 // Bit0 pin change interrupt 0: Off
; 0000 0116 // Bit1 pin change interrupt 0: Off
; 0000 0117 // Bit2 pin change interrupt 0: Off
; 0000 0118 // Bit3 pin change interrupt 0: Off
; 0000 0119 // Bit4 pin change interrupt 0: Off
; 0000 011A // Bit5 pin change interrupt 0: Off
; 0000 011B // Bit6 pin change interrupt 0: Off
; 0000 011C // Bit7 pin change interrupt 0: Off
; 0000 011D PORTA.INT0MASK=0x00;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 1
; 0000 011E // Bit0 pin change interrupt 1: Off
; 0000 011F // Bit1 pin change interrupt 1: Off
; 0000 0120 // Bit2 pin change interrupt 1: Off
; 0000 0121 // Bit3 pin change interrupt 1: Off
; 0000 0122 // Bit4 pin change interrupt 1: Off
; 0000 0123 // Bit5 pin change interrupt 1: Off
; 0000 0124 // Bit6 pin change interrupt 1: Off
; 0000 0125 // Bit7 pin change interrupt 1: Off
; 0000 0126 PORTA.INT1MASK=0x00;
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 1
; 0000 0127 
; 0000 0128 // PORTB initialization
; 0000 0129 // OUT register
; 0000 012A PORTB.OUT=0x00;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 1
; 0000 012B // Bit0: Input
; 0000 012C // Bit1: Input
; 0000 012D // Bit2: Input
; 0000 012E // Bit3: Input
; 0000 012F PORTB.DIR=0x00;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 1
; 0000 0130 // Bit0 Output/Pull configuration: Totempole/No
; 0000 0131 // Bit0 Input/Sense configuration: Sense both edges
; 0000 0132 // Bit0 inverted: Off
; 0000 0133 // Bit0 slew rate limitation: Off
; 0000 0134 PORTB.PIN0CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 1
; 0000 0135 // Bit1 Output/Pull configuration: Totempole/No
; 0000 0136 // Bit1 Input/Sense configuration: Sense both edges
; 0000 0137 // Bit1 inverted: Off
; 0000 0138 // Bit1 slew rate limitation: Off
; 0000 0139 PORTB.PIN1CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 1
; 0000 013A // Bit2 Output/Pull configuration: Totempole/No
; 0000 013B // Bit2 Input/Sense configuration: Sense both edges
; 0000 013C // Bit2 inverted: Off
; 0000 013D // Bit2 slew rate limitation: Off
; 0000 013E PORTB.PIN2CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 1
; 0000 013F // Bit3 Output/Pull configuration: Totempole/No
; 0000 0140 // Bit3 Input/Sense configuration: Sense both edges
; 0000 0141 // Bit3 inverted: Off
; 0000 0142 // Bit3 slew rate limitation: Off
; 0000 0143 PORTB.PIN3CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 1
; 0000 0144 // Interrupt 0 level: Disabled
; 0000 0145 // Interrupt 1 level: Disabled
; 0000 0146 PORTB.INTCTRL=(PORTB.INTCTRL & (~(PORT_INT1LVL_gm | PORT_INT0LVL_gm))) |
; 0000 0147 	PORT_INT1LVL_OFF_gc | PORT_INT0LVL_OFF_gc;
;PCODE: $000000A7 VOL: 1
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 1
; 0000 0148 // Bit0 pin change interrupt 0: Off
; 0000 0149 // Bit1 pin change interrupt 0: Off
; 0000 014A // Bit2 pin change interrupt 0: Off
; 0000 014B // Bit3 pin change interrupt 0: Off
; 0000 014C PORTB.INT0MASK=0x00;
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 1
; 0000 014D // Bit0 pin change interrupt 1: Off
; 0000 014E // Bit1 pin change interrupt 1: Off
; 0000 014F // Bit2 pin change interrupt 1: Off
; 0000 0150 // Bit3 pin change interrupt 1: Off
; 0000 0151 PORTB.INT1MASK=0x00;
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 1
; 0000 0152 
; 0000 0153 // PORTC initialization
; 0000 0154 // OUT register
; 0000 0155 PORTC.OUT=0x10;
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 1
; 0000 0156 // Bit0: Input
; 0000 0157 // Bit1: Input
; 0000 0158 // Bit2: Input
; 0000 0159 // Bit3: Input
; 0000 015A // Bit4: Output
; 0000 015B // Bit5: Output
; 0000 015C // Bit6: Input
; 0000 015D // Bit7: Output
; 0000 015E PORTC.DIR=0xB0;
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 1
; 0000 015F // Bit0 Output/Pull configuration: Totempole/No
; 0000 0160 // Bit0 Input/Sense configuration: Sense both edges
; 0000 0161 // Bit0 inverted: Off
; 0000 0162 // Bit0 slew rate limitation: Off
; 0000 0163 PORTC.PIN0CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 1
; 0000 0164 // Bit1 Output/Pull configuration: Totempole/No
; 0000 0165 // Bit1 Input/Sense configuration: Sense both edges
; 0000 0166 // Bit1 inverted: Off
; 0000 0167 // Bit1 slew rate limitation: Off
; 0000 0168 PORTC.PIN1CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 1
; 0000 0169 // Bit2 Output/Pull configuration: Totempole/No
; 0000 016A // Bit2 Input/Sense configuration: Sense both edges
; 0000 016B // Bit2 inverted: Off
; 0000 016C // Bit2 slew rate limitation: Off
; 0000 016D PORTC.PIN2CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 1
; 0000 016E // Bit3 Output/Pull configuration: Totempole/No
; 0000 016F // Bit3 Input/Sense configuration: Sense both edges
; 0000 0170 // Bit3 inverted: Off
; 0000 0171 // Bit3 slew rate limitation: Off
; 0000 0172 PORTC.PIN3CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 1
; 0000 0173 // Bit4 Output/Pull configuration: Totempole/No
; 0000 0174 // Bit4 Input/Sense configuration: Sense both edges
; 0000 0175 // Bit4 inverted: Off
; 0000 0176 // Bit4 slew rate limitation: Off
; 0000 0177 PORTC.PIN4CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 1
; 0000 0178 // Bit5 Output/Pull configuration: Totempole/No
; 0000 0179 // Bit5 Input/Sense configuration: Sense both edges
; 0000 017A // Bit5 inverted: Off
; 0000 017B // Bit5 slew rate limitation: Off
; 0000 017C PORTC.PIN5CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 1
; 0000 017D // Bit6 Output/Pull configuration: Totempole/No
; 0000 017E // Bit6 Input/Sense configuration: Sense both edges
; 0000 017F // Bit6 inverted: Off
; 0000 0180 // Bit6 slew rate limitation: Off
; 0000 0181 //PORTC.PIN6CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
; 0000 0182 // Bit6 Output/Pull configuration: Totempole/Pull-up (on input)
; 0000 0183 // Bit6 Input/Sense configuration: Sense both edges
; 0000 0184 // Bit6 inverted: Off
; 0000 0185 // Bit6 slew rate limitation: Off
; 0000 0186 PORTC.PIN6CTRL=PORT_OPC_PULLUP_gc | PORT_ISC_BOTHEDGES_gc; ///////////////////////////////////////////////////pull up!
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 1
; 0000 0187 
; 0000 0188 // Bit7 Output/Pull configuration: Totempole/No
; 0000 0189 // Bit7 Input/Sense configuration: Sense both edges
; 0000 018A // Bit7 inverted: Off
; 0000 018B // Bit7 slew rate limitation: Off
; 0000 018C PORTC.PIN7CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 1
; 0000 018D // Interrupt 0 level: Disabled
; 0000 018E // Interrupt 1 level: Disabled
; 0000 018F PORTC.INTCTRL=(PORTC.INTCTRL & (~(PORT_INT1LVL_gm | PORT_INT0LVL_gm))) |
; 0000 0190 	PORT_INT1LVL_OFF_gc | PORT_INT0LVL_OFF_gc;
;PCODE: $000000C4 VOL: 1
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 1
; 0000 0191 // Bit0 pin change interrupt 0: Off
; 0000 0192 // Bit1 pin change interrupt 0: Off
; 0000 0193 // Bit2 pin change interrupt 0: Off
; 0000 0194 // Bit3 pin change interrupt 0: Off
; 0000 0195 // Bit4 pin change interrupt 0: Off
; 0000 0196 // Bit5 pin change interrupt 0: Off
; 0000 0197 // Bit6 pin change interrupt 0: Off
; 0000 0198 // Bit7 pin change interrupt 0: Off
; 0000 0199 PORTC.INT0MASK=0x00;
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 1
; 0000 019A // Bit0 pin change interrupt 1: Off
; 0000 019B // Bit1 pin change interrupt 1: Off
; 0000 019C // Bit2 pin change interrupt 1: Off
; 0000 019D // Bit3 pin change interrupt 1: Off
; 0000 019E // Bit4 pin change interrupt 1: Off
; 0000 019F // Bit5 pin change interrupt 1: Off
; 0000 01A0 // Bit6 pin change interrupt 1: Off
; 0000 01A1 // Bit7 pin change interrupt 1: Off
; 0000 01A2 PORTC.INT1MASK=0x00;
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 1
; 0000 01A3 
; 0000 01A4 // PORTD initialization
; 0000 01A5 // OUT register
; 0000 01A6 PORTD.OUT=0x18;
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 1
; 0000 01A7 // Bit0: Input
; 0000 01A8 // Bit1: Input
; 0000 01A9 // Bit2: Input
; 0000 01AA // Bit3: Output
; 0000 01AB // Bit4: Output
; 0000 01AC // Bit5: Output
; 0000 01AD // Bit6: Input
; 0000 01AE // Bit7: Output
; 0000 01AF PORTD.DIR=0xB8;
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 1
; 0000 01B0 // Bit0 Output/Pull configuration: Totempole/No
; 0000 01B1 // Bit0 Input/Sense configuration: Sense both edges
; 0000 01B2 // Bit0 inverted: Off
; 0000 01B3 // Bit0 slew rate limitation: Off
; 0000 01B4 PORTD.PIN0CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 1
; 0000 01B5 // Bit1 Output/Pull configuration: Totempole/No
; 0000 01B6 // Bit1 Input/Sense configuration: Sense both edges
; 0000 01B7 // Bit1 inverted: Off
; 0000 01B8 // Bit1 slew rate limitation: Off
; 0000 01B9 PORTD.PIN1CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 1
; 0000 01BA // Bit2 Output/Pull configuration: Totempole/No
; 0000 01BB // Bit2 Input/Sense configuration: Sense both edges
; 0000 01BC // Bit2 inverted: Off
; 0000 01BD // Bit2 slew rate limitation: Off
; 0000 01BE PORTD.PIN2CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 1
; 0000 01BF // Bit3 Output/Pull configuration: Totempole/No
; 0000 01C0 // Bit3 Input/Sense configuration: Sense both edges
; 0000 01C1 // Bit3 inverted: Off
; 0000 01C2 // Bit3 slew rate limitation: Off
; 0000 01C3 PORTD.PIN3CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 1
; 0000 01C4 // Bit4 Output/Pull configuration: Totempole/No
; 0000 01C5 // Bit4 Input/Sense configuration: Sense both edges
; 0000 01C6 // Bit4 inverted: Off
; 0000 01C7 // Bit4 slew rate limitation: Off
; 0000 01C8 PORTD.PIN4CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 1
; 0000 01C9 // Bit5 Output/Pull configuration: Totempole/No
; 0000 01CA // Bit5 Input/Sense configuration: Sense both edges
; 0000 01CB // Bit5 inverted: Off
; 0000 01CC // Bit5 slew rate limitation: Off
; 0000 01CD PORTD.PIN5CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 1
; 0000 01CE // Bit6 Output/Pull configuration: Totempole/No
; 0000 01CF // Bit6 Input/Sense configuration: Sense both edges
; 0000 01D0 // Bit6 inverted: Off
; 0000 01D1 // Bit6 slew rate limitation: Off
; 0000 01D2 PORTD.PIN6CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 1
; 0000 01D3 // Bit7 Output/Pull configuration: Totempole/No
; 0000 01D4 // Bit7 Input/Sense configuration: Sense both edges
; 0000 01D5 // Bit7 inverted: Off
; 0000 01D6 // Bit7 slew rate limitation: Off
; 0000 01D7 PORTD.PIN7CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 1
; 0000 01D8 // Interrupt 0 level: Disabled
; 0000 01D9 // Interrupt 1 level: Disabled
; 0000 01DA PORTD.INTCTRL=(PORTD.INTCTRL & (~(PORT_INT1LVL_gm | PORT_INT0LVL_gm))) |
; 0000 01DB 	PORT_INT1LVL_OFF_gc | PORT_INT0LVL_OFF_gc;
;PCODE: $000000E1 VOL: 1
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 1
; 0000 01DC // Bit0 pin change interrupt 0: Off
; 0000 01DD // Bit1 pin change interrupt 0: Off
; 0000 01DE // Bit2 pin change interrupt 0: Off
; 0000 01DF // Bit3 pin change interrupt 0: Off
; 0000 01E0 // Bit4 pin change interrupt 0: Off
; 0000 01E1 // Bit5 pin change interrupt 0: Off
; 0000 01E2 // Bit6 pin change interrupt 0: Off
; 0000 01E3 // Bit7 pin change interrupt 0: Off
; 0000 01E4 PORTD.INT0MASK=0x00;
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 1
; 0000 01E5 // Bit0 pin change interrupt 1: Off
; 0000 01E6 // Bit1 pin change interrupt 1: Off
; 0000 01E7 // Bit2 pin change interrupt 1: Off
; 0000 01E8 // Bit3 pin change interrupt 1: Off
; 0000 01E9 // Bit4 pin change interrupt 1: Off
; 0000 01EA // Bit5 pin change interrupt 1: Off
; 0000 01EB // Bit6 pin change interrupt 1: Off
; 0000 01EC // Bit7 pin change interrupt 1: Off
; 0000 01ED PORTD.INT1MASK=0x00;
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 1
; 0000 01EE 
; 0000 01EF // PORTE initialization
; 0000 01F0 // OUT register
; 0000 01F1 PORTE.OUT=0x00;
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 1
; 0000 01F2 // Bit0: Input
; 0000 01F3 // Bit1: Input
; 0000 01F4 // Bit2: Input
; 0000 01F5 // Bit3: Input
; 0000 01F6 PORTE.DIR=0x00;
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 1
; 0000 01F7 // Bit0 Output/Pull configuration: Totempole/No
; 0000 01F8 // Bit0 Input/Sense configuration: Sense both edges
; 0000 01F9 // Bit0 inverted: Off
; 0000 01FA // Bit0 slew rate limitation: Off
; 0000 01FB PORTE.PIN0CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 1
; 0000 01FC // Bit1 Output/Pull configuration: Totempole/No
; 0000 01FD // Bit1 Input/Sense configuration: Sense both edges
; 0000 01FE // Bit1 inverted: Off
; 0000 01FF // Bit1 slew rate limitation: Off
; 0000 0200 PORTE.PIN1CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 1
; 0000 0201 // Bit2 Output/Pull configuration: Totempole/No
; 0000 0202 // Bit2 Input/Sense configuration: Sense both edges
; 0000 0203 // Bit2 inverted: Off
; 0000 0204 // Bit2 slew rate limitation: Off
; 0000 0205 PORTE.PIN2CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 1
; 0000 0206 // Bit3 Output/Pull configuration: Totempole/No
; 0000 0207 // Bit3 Input/Sense configuration: Sense both edges
; 0000 0208 // Bit3 inverted: Off
; 0000 0209 // Bit3 slew rate limitation: Off
; 0000 020A PORTE.PIN3CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 1
; 0000 020B // Interrupt 0 level: Disabled
; 0000 020C // Interrupt 1 level: Disabled
; 0000 020D PORTE.INTCTRL=(PORTE.INTCTRL & (~(PORT_INT1LVL_gm | PORT_INT0LVL_gm))) |
; 0000 020E 	PORT_INT1LVL_OFF_gc | PORT_INT0LVL_OFF_gc;
;PCODE: $000000F6 VOL: 1
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 1
; 0000 020F // Bit0 pin change interrupt 0: Off
; 0000 0210 // Bit1 pin change interrupt 0: Off
; 0000 0211 // Bit2 pin change interrupt 0: Off
; 0000 0212 // Bit3 pin change interrupt 0: Off
; 0000 0213 PORTE.INT0MASK=0x00;
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 1
; 0000 0214 // Bit0 pin change interrupt 1: Off
; 0000 0215 // Bit1 pin change interrupt 1: Off
; 0000 0216 // Bit2 pin change interrupt 1: Off
; 0000 0217 // Bit3 pin change interrupt 1: Off
; 0000 0218 PORTE.INT1MASK=0x00;
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 1
; 0000 0219 
; 0000 021A // PORTR initialization
; 0000 021B // OUT register
; 0000 021C PORTR.OUT=0x00;
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 1
; 0000 021D // Bit0: Input
; 0000 021E // Bit1: Input
; 0000 021F PORTR.DIR=0x00;
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 1
; 0000 0220 // Bit0 Output/Pull configuration: Totempole/No
; 0000 0221 // Bit0 Input/Sense configuration: Sense both edges
; 0000 0222 // Bit0 inverted: Off
; 0000 0223 // Bit0 slew rate limitation: Off
; 0000 0224 PORTR.PIN0CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 1
; 0000 0225 // Bit1 Output/Pull configuration: Totempole/No
; 0000 0226 // Bit1 Input/Sense configuration: Sense both edges
; 0000 0227 // Bit1 inverted: Off
; 0000 0228 // Bit1 slew rate limitation: Off
; 0000 0229 PORTR.PIN1CTRL=PORT_OPC_TOTEM_gc | PORT_ISC_BOTHEDGES_gc;
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 1
; 0000 022A // Interrupt 0 level: Disabled
; 0000 022B // Interrupt 1 level: Disabled
; 0000 022C PORTR.INTCTRL=(PORTR.INTCTRL & (~(PORT_INT1LVL_gm | PORT_INT0LVL_gm))) |
; 0000 022D 	PORT_INT1LVL_OFF_gc | PORT_INT0LVL_OFF_gc;
;PCODE: $00000107 VOL: 1
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 1
; 0000 022E // Bit0 pin change interrupt 0: Off
; 0000 022F // Bit1 pin change interrupt 0: Off
; 0000 0230 PORTR.INT0MASK=0x00;
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 1
; 0000 0231 // Bit0 pin change interrupt 1: Off
; 0000 0232 // Bit1 pin change interrupt 1: Off
; 0000 0233 PORTR.INT1MASK=0x00;
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 1
; 0000 0234 }
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;
;// Virtual Ports initialization
;void vports_init(void)
; 0000 0238 {
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 0239 // PORTA mapped to VPORT0
; 0000 023A // PORTB mapped to VPORT1
; 0000 023B PORTCFG.VPCTRLA=PORTCFG_VP1MAP_PORTB_gc | PORTCFG_VP0MAP_PORTA_gc;
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 1
; 0000 023C // PORTC mapped to VPORT2
; 0000 023D // PORTD mapped to VPORT3
; 0000 023E PORTCFG.VPCTRLB=PORTCFG_VP3MAP_PORTD_gc | PORTCFG_VP2MAP_PORTC_gc;
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 1
; 0000 023F }
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;// Disable a Timer/Counter type 0
;void tc0_disable(TC0_t *ptc)
; 0000 0242 {
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 0243 // Timer/Counter off
; 0000 0244 ptc->CTRLA=(ptc->CTRLA & (~TC0_CLKSEL_gm)) | TC_CLKSEL_OFF_gc;
;	*ptc -> Y+0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 0245 // Issue a reset command
; 0000 0246 ptc->CTRLFSET=TC_CMD_RESET_gc;
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0000 0247 }
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;// Timer/Counter TCC0 initialization
;void tcc0_init(void)
; 0000 024A {
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 024B unsigned char s;
; 0000 024C unsigned char n;
; 0000 024D 
; 0000 024E // Note: the correct PORTC direction for the Compare Channels outputs
; 0000 024F // is configured in the ports_init function
; 0000 0250 
; 0000 0251 // Save interrupts enabled/disabled state
; 0000 0252 s=SREG;
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;	s -> R17
;	n -> R16
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0000 0253 // Disable interrupts
; 0000 0254 #asm("cli")
;PCODE: $0000012F VOL: 0
	cli
;PCODE: $00000130 VOL: 0
; 0000 0255 
; 0000 0256 // Disable and reset the timer/counter just to be sure
; 0000 0257 tc0_disable(&TCC0);
;PCODE: $00000131 VOL: 1
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 0258 // Clock source: Peripheral Clock/1
; 0000 0259 TCC0.CTRLA=(TCC0.CTRLA & (~TC0_CLKSEL_gm)) | TC_CLKSEL_DIV1_gc;
;PCODE: $00000134 VOL: 1
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 1
; 0000 025A // Mode: Normal Operation, Overflow Int./Event on TOP
; 0000 025B // Compare/Capture on channel A: Off
; 0000 025C // Compare/Capture on channel B: Off
; 0000 025D // Compare/Capture on channel C: Off
; 0000 025E // Compare/Capture on channel D: Off
; 0000 025F TCC0.CTRLB=(TCC0.CTRLB & (~(TC0_CCAEN_bm | TC0_CCBEN_bm | TC0_CCCEN_bm | TC0_CCDEN_bm | TC0_WGMODE_gm))) |
; 0000 0260 	TC_WGMODE_NORMAL_gc;
;PCODE: $00000138 VOL: 1
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 1
; 0000 0261 
; 0000 0262 // Capture event source: None
; 0000 0263 // Capture event action: None
; 0000 0264 TCC0.CTRLD=(TCC0.CTRLD & (~(TC0_EVACT_gm | TC0_EVSEL_gm))) |
; 0000 0265 	TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
;PCODE: $0000013C VOL: 1
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 1
; 0000 0266 
; 0000 0267 // Overflow interrupt: Low Level
; 0000 0268 // Error interrupt: Disabled
; 0000 0269 TCC0.INTCTRLA=(TCC0.INTCTRLA & (~(TC0_ERRINTLVL_gm | TC0_OVFINTLVL_gm))) |
; 0000 026A 	TC_ERRINTLVL_OFF_gc | TC_OVFINTLVL_LO_gc;
;PCODE: $00000141 VOL: 1
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 1
; 0000 026B 
; 0000 026C // Compare/Capture channel A interrupt: Disabled
; 0000 026D // Compare/Capture channel B interrupt: Disabled
; 0000 026E // Compare/Capture channel C interrupt: Disabled
; 0000 026F // Compare/Capture channel D interrupt: Disabled
; 0000 0270 TCC0.INTCTRLB=(TCC0.INTCTRLB & (~(TC0_CCDINTLVL_gm | TC0_CCCINTLVL_gm | TC0_CCBINTLVL_gm | TC0_CCAINTLVL_gm))) |
; 0000 0271 	TC_CCDINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCAINTLVL_OFF_gc;
;PCODE: $00000146 VOL: 1
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 1
; 0000 0272 
; 0000 0273 // High resolution extension: Off
; 0000 0274 HIRESC.CTRL&= ~HIRES_HREN0_bm;
;PCODE: $0000014D VOL: 1
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 1
; 0000 0275 
; 0000 0276 // Advanced Waveform Extension initialization
; 0000 0277 // Optimize for speed
; 0000 0278 #pragma optsize-
; 0000 0279 // Disable locking the AWEX configuration registers just to be sure
; 0000 027A n=MCU.AWEXLOCK & (~MCU_AWEXCLOCK_bm);
;PCODE: $00000150 VOL: 1
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0000 027B CCP=CCP_IOREG_gc;
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0000 027C MCU.AWEXLOCK=n;
;PCODE: $00000155 VOL: 1
;PCODE: $00000156 VOL: 0
; 0000 027D // Restore optimization for size if needed
; 0000 027E #pragma optsize_default
; 0000 027F 
; 0000 0280 // Pattern generation: Off
; 0000 0281 // Dead time insertion: Off
; 0000 0282 AWEXC.CTRL&= ~(AWEX_PGM_bm | AWEX_CWCM_bm | AWEX_DTICCDEN_bm | AWEX_DTICCCEN_bm | AWEX_DTICCBEN_bm | AWEX_DTICCAEN_bm);
;PCODE: $00000157 VOL: 1
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 1
; 0000 0283 
; 0000 0284 // Fault protection initialization
; 0000 0285 // Fault detection on OCD Break detection: On
; 0000 0286 // Fault detection restart mode: Latched Mode
; 0000 0287 // Fault detection action: None (Fault protection disabled)
; 0000 0288 AWEXC.FDCTRL=(AWEXC.FDCTRL & (~(AWEX_FDDBD_bm | AWEX_FDMODE_bm | AWEX_FDACT_gm))) |
; 0000 0289 	AWEX_FDACT_NONE_gc;
;PCODE: $0000015A VOL: 1
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 1
; 0000 028A // Fault detect events:
; 0000 028B // Event channel 0: Off
; 0000 028C // Event channel 1: Off
; 0000 028D // Event channel 2: Off
; 0000 028E // Event channel 3: Off
; 0000 028F // Event channel 4: Off
; 0000 0290 // Event channel 5: Off
; 0000 0291 // Event channel 6: Off
; 0000 0292 // Event channel 7: Off
; 0000 0293 AWEXC.FDEVMASK=0b00000000;
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 1
; 0000 0294 // Make sure the fault detect flag is cleared
; 0000 0295 AWEXC.STATUS|=AWEXC.STATUS & AWEX_FDF_bm;
;PCODE: $00000160 VOL: 1
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 1
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
; 0000 0296 
; 0000 0297 // Clear the interrupt flags
; 0000 0298 TCC0.INTFLAGS=TCC0.INTFLAGS;
;PCODE: $00000168 VOL: 1
;PCODE: $00000169 VOL: 1
; 0000 0299 // Set counter register
; 0000 029A TCC0.CNT=0x0000;
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 1
; 0000 029B // Set period register
; 0000 029C TCC0.PER=0x4E1F;
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 1
; 0000 029D // Set channel A Compare/Capture register
; 0000 029E TCC0.CCA=0x0000;
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 1
; 0000 029F // Set channel B Compare/Capture register
; 0000 02A0 TCC0.CCB=0x0000;
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 1
; 0000 02A1 // Set channel C Compare/Capture register
; 0000 02A2 TCC0.CCC=0x0000;
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 1
; 0000 02A3 // Set channel D Compare/Capture register
; 0000 02A4 TCC0.CCD=0x0000;
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 1
; 0000 02A5 
; 0000 02A6 // Restore interrupts enabled/disabled state
; 0000 02A7 SREG=s;
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0000 02A8 }
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;
;// Timer/counter TCC0 Overflow/Underflow interrupt service routine
;interrupt [TCC0_OVF_vect] void tcc0_overflow_isr(void)
; 0000 02AC {
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
; 0000 02AD // write your code here
; 0000 02AE     ten_ms++;
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
; 0000 02AF     if(ten_ms>128) //128
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
; 0000 02B0     {
; 0000 02B1         ten_ms=0;
;PCODE: $00000183 VOL: 0
; 0000 02B2     }
; 0000 02B3 }
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;
;// RTC initialization
;
;unsigned long int RTC_sec=0;
;bit RTC_flag=0;
;
;void rtcxm_init(void)
; 0000 02BB {
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0000 02BC unsigned char s;
; 0000 02BD 
; 0000 02BE // RTC clock source: 1024 Hz from internal 32 kHz RC Oscillator
; 0000 02BF // Internal 32 kHz RC oscillator initialization
; 0000 02C0 // Enable the internal 32 kHz RC oscillator
; 0000 02C1 OSC.CTRL|=OSC_RC32KEN_bm;
;PCODE: $0000018A VOL: 0
;	s -> R17
;PCODE: $0000018B VOL: 1
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 1
; 0000 02C2 // Wait for the internal 32 kHz RC oscillator to stabilize
; 0000 02C3 while ((OSC.STATUS & OSC_RC32KRDY_bm)==0);
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 1
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
; 0000 02C4 
; 0000 02C5 // Select the clock source and enable the RTC clock
; 0000 02C6 CLK.RTCCTRL=(CLK.RTCCTRL & (~CLK_RTCSRC_gm)) | CLK_RTCSRC_RCOSC_gc | CLK_RTCEN_bm;
;PCODE: $00000194 VOL: 1
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 1
; 0000 02C7 // Make sure that the RTC is stopped before initializing it
; 0000 02C8 RTC.CTRL=(RTC.CTRL & (~RTC_PRESCALER_gm)) | RTC_PRESCALER_OFF_gc;
;PCODE: $00000198 VOL: 1
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 1
; 0000 02C9 
; 0000 02CA // Optimize for speed
; 0000 02CB #pragma optsize-
; 0000 02CC // Save interrupts enabled/disabled state
; 0000 02CD s=SREG;
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
; 0000 02CE // Disable interrupts
; 0000 02CF #asm("cli")
;PCODE: $0000019E VOL: 0
	cli
;PCODE: $0000019F VOL: 0
; 0000 02D0 
; 0000 02D1 // Wait until the RTC is not busy
; 0000 02D2 while (RTC.STATUS & RTC_SYNCBUSY_bm);
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 1
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
; 0000 02D3 // Set the RTC period register
; 0000 02D4 RTC.PER=0x0400;
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 1
; 0000 02D5 // Set the RTC count register
; 0000 02D6 RTC.CNT=0x0000;
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 1
; 0000 02D7 // Set the RTC compare register
; 0000 02D8 RTC.COMP=0x0000;
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 1
; 0000 02D9 
; 0000 02DA // Restore interrupts enabled/disabled state
; 0000 02DB SREG=s;
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
; 0000 02DC // Restore optimization for size if needed
; 0000 02DD #pragma optsize_default
; 0000 02DE 
; 0000 02DF // Set the clock prescaler: RTC Clock/1
; 0000 02E0 // and start the RTC
; 0000 02E1 RTC.CTRL=(RTC.CTRL & (~RTC_PRESCALER_gm)) | RTC_PRESCALER_DIV1_gc;
;PCODE: $000001AE VOL: 1
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 1
; 0000 02E2 
; 0000 02E3 // RTC overflow interrupt: Low Level
; 0000 02E4 // RTC compare interrupt: Disabled
; 0000 02E5 RTC.INTCTRL=(RTC.INTCTRL & (~(RTC_OVFINTLVL_gm | RTC_COMPINTLVL_gm))) |
; 0000 02E6 	RTC_OVFINTLVL_LO_gc | RTC_COMPINTLVL_OFF_gc;
;PCODE: $000001B2 VOL: 1
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 1
; 0000 02E7 }
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;
;// RTC overflow interrupt service routine
;interrupt [RTC_OVF_vect] void rtcxm_overflow_isr(void)
; 0000 02EB {
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
; 0000 02EC // write your code here
; 0000 02ED     RTC_flag=1;
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
; 0000 02EE     RTC_sec++;
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
; 0000 02EF }
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;
;// Disable an USART
;void usart_disable(USART_t *pu)
; 0000 02F3 {
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
; 0000 02F4 // Rx and Tx are off
; 0000 02F5 pu->CTRLB=0;
;	*pu -> Y+0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
; 0000 02F6 // Ensure that all interrupts generated by the USART are off
; 0000 02F7 pu->CTRLA=0;
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
; 0000 02F8 }
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;
;// USARTD0 initialization
;void usartd0_init(void)
; 0000 02FC {
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
; 0000 02FD // Note: the correct PORTD direction for the RxD, TxD and XCK signals
; 0000 02FE // is configured in the ports_init function
; 0000 02FF 
; 0000 0300 // Transmitter is enabled
; 0000 0301 // Set TxD=1
; 0000 0302 PORTD.OUTSET=0x08;
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 1
; 0000 0303 
; 0000 0304 // Communication mode: Asynchronous USART
; 0000 0305 // Data bits: 8
; 0000 0306 // Stop bits: 1
; 0000 0307 // Parity: Disabled
; 0000 0308 USARTD0.CTRLC=USART_CMODE_ASYNCHRONOUS_gc | USART_PMODE_DISABLED_gc | USART_CHSIZE_8BIT_gc;
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 1
; 0000 0309 
; 0000 030A // Receive complete interrupt: Low Level
; 0000 030B // Transmit complete interrupt: Disabled
; 0000 030C // Data register empty interrupt: Disabled
; 0000 030D USARTD0.CTRLA=(USARTD0.CTRLA & (~(USART_RXCINTLVL_gm | USART_TXCINTLVL_gm | USART_DREINTLVL_gm))) |
; 0000 030E 	USART_RXCINTLVL_LO_gc | USART_TXCINTLVL_OFF_gc | USART_DREINTLVL_OFF_gc;
;PCODE: $000001D8 VOL: 1
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 1
; 0000 030F 
; 0000 0310 // Required Baud rate: 115200
; 0000 0311 // Real Baud Rate: 115107.9 (x1 Mode), Error: 0.1 %
; 0000 0312 USARTD0.BAUDCTRLA=0x0B;
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 1
; 0000 0313 USARTD0.BAUDCTRLB=((0x09 << USART_BSCALE_bp) & USART_BSCALE_gm) | 0x00;
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 1
; 0000 0314 
; 0000 0315 // Receiver: On
; 0000 0316 // Transmitter: On
; 0000 0317 // Double transmission speed mode: Off
; 0000 0318 // Multi-processor communication mode: Off
; 0000 0319 USARTD0.CTRLB=(USARTD0.CTRLB & (~(USART_RXEN_bm | USART_TXEN_bm | USART_CLK2X_bm | USART_MPCM_bm | USART_TXB8_bm))) |
; 0000 031A 	USART_RXEN_bm | USART_TXEN_bm;
;PCODE: $000001E2 VOL: 1
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 1
; 0000 031B }
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;
;// USARTD0 Receiver buffer
;#define RX_BUFFER_SIZE_USARTD0 8
;char rx_buffer_usartd0[RX_BUFFER_SIZE_USARTD0];
;
;#if RX_BUFFER_SIZE_USARTD0 <= 256
;unsigned char rx_wr_index_usartd0=0,rx_rd_index_usartd0=0,rx_counter_usartd0=0;
;#else
;unsigned int rx_wr_index_usartd0=0,rx_rd_index_usartd0=0,rx_counter_usartd0=0;
;#endif
;
;// This flag is set on USARTD0 Receiver buffer overflow
;bit rx_buffer_overflow_usartd0=0, command_flag=0;
;unsigned char command[31];  // ¸í·É¾î ¹öÆÛ
;unsigned char command_size=0;         // ¹öÆÛÁÖ¼Ò
;
;// USARTD0 Receiver interrupt service routine
;interrupt [USARTD0_RXC_vect] void usartd0_rx_isr(void)
; 0000 032E {
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
; 0000 032F unsigned char status;
; 0000 0330 char data;
; 0000 0331 
; 0000 0332 status=USARTD0.STATUS;
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 1
; 0000 0333 data=USARTD0.DATA;
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 1
; 0000 0334 if ((status & (USART_FERR_bm | USART_PERR_bm | USART_BUFOVF_bm)) == 0)
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
; 0000 0335    {
; 0000 0336    rx_buffer_usartd0[rx_wr_index_usartd0++]=data;
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
; 0000 0337 #if RX_BUFFER_SIZE_USARTD0 == 256
; 0000 0338    // special case for receiver buffer size=256
; 0000 0339    if (++rx_counter_usartd0 == 0)
; 0000 033A       {
; 0000 033B #else
; 0000 033C    if (rx_wr_index_usartd0 == RX_BUFFER_SIZE_USARTD0) rx_wr_index_usartd0=0;
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
; 0000 033D    if (++rx_counter_usartd0 == RX_BUFFER_SIZE_USARTD0)
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
; 0000 033E       {
; 0000 033F       rx_counter_usartd0=0;
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
; 0000 0340 #endif
; 0000 0341       rx_buffer_overflow_usartd0=1;
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
; 0000 0342       }
; 0000 0343    }
;PCODE: $00000209 VOL: 0
; 0000 0344     command[command_size]=data;
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
; 0000 0345     if(data=='>')
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
; 0000 0346     {
; 0000 0347         command_flag=1;
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
; 0000 0348         command_size=0;
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
; 0000 0349     }
; 0000 034A     if(command_size>=30) command_size=0;
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
; 0000 034B     else command_size++;
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
; 0000 034C }
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;
;// Receive a character from USARTD0
;// USARTD0 is used as the default input device by the 'getchar' function
;#define _ALTERNATE_GETCHAR_
;
;#pragma used+
;char getchar(void)
; 0000 0354 {
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
; 0000 0355 char data;
; 0000 0356 
; 0000 0357 while (rx_counter_usartd0==0);
;PCODE: $00000228 VOL: 0
;	data -> R17
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
; 0000 0358 data=rx_buffer_usartd0[rx_rd_index_usartd0++];
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
; 0000 0359 #if RX_BUFFER_SIZE_USARTD0 != 256
; 0000 035A if (rx_rd_index_usartd0 == RX_BUFFER_SIZE_USARTD0) rx_rd_index_usartd0=0;
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
; 0000 035B #endif
; 0000 035C #asm("cli")
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
	cli
;PCODE: $0000023D VOL: 0
; 0000 035D --rx_counter_usartd0;
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
; 0000 035E #asm("sei")
;PCODE: $00000241 VOL: 0
	sei
;PCODE: $00000242 VOL: 0
; 0000 035F return data;
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
; 0000 0360 }
;PCODE: $00000246 VOL: 0
;#pragma used-
;
;// Write a character to the USARTD0 Transmitter
;// USARTD0 is used as the default output device by the 'putchar' function
;#define _ALTERNATE_PUTCHAR_
;
;#pragma used+
;void putchar(char c)
; 0000 0369 {
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
; 0000 036A while ((USARTD0.STATUS & USART_DREIF_bm) == 0);
;	c -> Y+0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 1
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
; 0000 036B USARTD0.DATA=c;
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 1
; 0000 036C }
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;#pragma used-
;
;// SPIC initialization
;void spic_init(void)
; 0000 0371 {
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
; 0000 0372 // SPIC is enabled
; 0000 0373 // SPI mode: 0
; 0000 0374 // Operating as: Master
; 0000 0375 // Data order: MSB First
; 0000 0376 // SCK clock prescaler: 4
; 0000 0377 // SCK clock doubled: On
; 0000 0378 // SCK clock frequency: 1000.000 kHz
; 0000 0379 SPIC.CTRL=SPI_ENABLE_bm | SPI_MODE_0_gc | SPI_MASTER_bm |
; 0000 037A 	SPI_PRESCALER_DIV4_gc | SPI_CLK2X_bm;
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 1
; 0000 037B 
; 0000 037C // SPIC interrupt: Disabled
; 0000 037D SPIC.INTCTRL=(SPIC.INTCTRL & (~SPI_INTLVL_gm)) | SPI_INTLVL_OFF_gc;
;PCODE: $00000258 VOL: 1
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 1
; 0000 037E 
; 0000 037F // Note: the MOSI (PORTC Bit 5), SCK (PORTC Bit 7) and
; 0000 0380 // /SS (PORTC Bit 4) signals are configured as outputs in the ports_init function
; 0000 0381 }
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;
;// Macro used to drive the SPIC /SS signal low in order to select the slave
;#define SET_SPIC_SS_LOW {PORTC.OUTCLR=SPI_SS_bm;}
;// Macro used to drive the SPIC /SS signal high in order to deselect the slave
;#define SET_SPIC_SS_HIGH {PORTC.OUTSET=SPI_SS_bm;}
;
;// SPIC transmit/receive function in Master mode
;// c - data to be transmitted
;// Returns the received data
;#pragma used+
;unsigned char SPI1_Write(unsigned char c)
; 0000 038D {
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
; 0000 038E // Transmit data in Master mode
; 0000 038F SPIC.DATA=c;
;	c -> Y+0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 1
; 0000 0390 // Wait for the data to be transmitted/received
; 0000 0391 while ((SPIC.STATUS & SPI_IF_bm)==0);
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 1
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
; 0000 0392 // Return the received data
; 0000 0393 return SPIC.DATA;
;PCODE: $00000268 VOL: 1
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
; 0000 0394 }
;PCODE: $0000026B VOL: 0
;#pragma used-
;
;// SPID initialization
;void spid_init(void)
; 0000 0399 {
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
; 0000 039A // SPID is enabled
; 0000 039B // SPI mode: 0
; 0000 039C // Operating as: Master
; 0000 039D // Data order: MSB First
; 0000 039E // SCK clock prescaler: 4
; 0000 039F // SCK clock doubled: On
; 0000 03A0 // SCK clock frequency: 1000.000 kHz
; 0000 03A1 SPID.CTRL=SPI_ENABLE_bm | SPI_MODE_0_gc | SPI_MASTER_bm |
; 0000 03A2 	SPI_PRESCALER_DIV4_gc | SPI_CLK2X_bm;
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 1
; 0000 03A3 
; 0000 03A4 // SPID interrupt: Disabled
; 0000 03A5 SPID.INTCTRL=(SPID.INTCTRL & (~SPI_INTLVL_gm)) | SPI_INTLVL_OFF_gc;
;PCODE: $00000270 VOL: 1
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 1
; 0000 03A6 
; 0000 03A7 // Note: the MOSI (PORTD Bit 5), SCK (PORTD Bit 7) and
; 0000 03A8 // /SS (PORTD Bit 4) signals are configured as outputs in the ports_init function
; 0000 03A9 }
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;
;// Macro used to drive the SPID /SS signal low in order to select the slave
;#define SET_SPID_SS_LOW {PORTD.OUTCLR=SPI_SS_bm;}
;// Macro used to drive the SPID /SS signal high in order to deselect the slave
;#define SET_SPID_SS_HIGH {PORTD.OUTSET=SPI_SS_bm;}
;
;// SPID transmit/receive function in Master mode
;// c - data to be transmitted
;// Returns the received data
;#pragma used+
;unsigned char spid_master_tx_rx(unsigned char c)
; 0000 03B5 {
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
; 0000 03B6 // Transmit data in Master mode
; 0000 03B7 SPID.DATA=c;
;	c -> Y+0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 1
; 0000 03B8 // Wait for the data to be transmitted/received
; 0000 03B9 while ((SPID.STATUS & SPI_IF_bm)==0);
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 1
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
; 0000 03BA // Return the received data
; 0000 03BB return SPID.DATA;
;PCODE: $00000280 VOL: 1
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
; 0000 03BC }
;PCODE: $00000283 VOL: 0
;#pragma used-
;////////////////////////////////////////////////////////////////////OSD Driver//////////////////////////////////////////////////////////////////////////////
;void MAX7456_SPI_WRITE(unsigned short ADDRESS, unsigned short DATA){
; 0000 03BF void MAX7456_SPI_WRITE(unsigned short ADDRESS, unsigned short DATA){
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
; 0000 03C0   SET_SPIC_SS_LOW            //OSD_CS = 0;                // Selecting the OSD click
;	ADDRESS -> Y+2
;	DATA -> Y+0
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 1
; 0000 03C1   delay_us(1);               //
;PCODE: $00000288 VOL: 0
; 0000 03C2   SPI1_Write(ADDRESS);       // Send the ADDRESS of registe in which you wish to wite DATA
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
; 0000 03C3   SPI1_Write(DATA);          // Send the DATA which you wish to wite
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
; 0000 03C4   delay_us(1);               //
;PCODE: $0000028F VOL: 0
; 0000 03C5   SET_SPIC_SS_HIGH           //OSD_CS = 1;                // Deselecting the OSD click
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 1
; 0000 03C6   delay_us(10);
;PCODE: $00000292 VOL: 0
; 0000 03C7 }
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;unsigned short MAX7456_SPI_READ(unsigned short ADDRESS){
; 0000 03C8 unsigned short MAX7456_SPI_READ(unsigned short ADDRESS){
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
; 0000 03C9 unsigned short temp;
; 0000 03CA   SET_SPIC_SS_LOW            //OSD_CS = 0;                // Selecting the OSD click
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;	ADDRESS -> Y+2
;	temp -> R16,R17
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 1
; 0000 03CB   delay_us(1);               //
;PCODE: $0000029C VOL: 0
; 0000 03CC   SPI1_Write(ADDRESS);       // Send the ADDRESS of registe from which you wish to read DATA
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
; 0000 03CD   delay_us(1);               //
;PCODE: $000002A0 VOL: 0
; 0000 03CE   temp  = SPI1_Write(0);     //SPI1_Read(0);      // Read the register DATA
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
; 0000 03CF   SET_SPIC_SS_HIGH           //OSD_CS = 1;                // Deselecting the OSD click
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 1
; 0000 03D0   delay_us(20);
;PCODE: $000002A8 VOL: 0
; 0000 03D1 }
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
;
;void MAX7456_init(){
; 0000 03D3 void MAX7456_init(){
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
; 0000 03D4 unsigned short temp;
; 0000 03D5   MAX7456_SPI_WRITE(0x00, 0x0C);   // Setup Video Mode 0 register
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
;	temp -> R16,R17
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
; 0000 03D6   temp  = MAX7456_SPI_READ(0xEC);  // Read OSD Black Level register
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
; 0000 03D7   temp&= 0xEF;
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
; 0000 03D8   MAX7456_SPI_WRITE(0x6C, temp);  // Setup OSD Black Level register
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
; 0000 03D9   MAX7456_SPI_WRITE(0x04, 0x04);  // Setup Display Memory Mode register
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
; 0000 03DA   MAX7456_SPI_WRITE(0x02, 0x26);  // Horizotal offset for ~1/2 of character
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
; 0000 03DB }
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
;
;void MAX7456_Write(unsigned short x, unsigned short y, unsigned short symbol)
; 0000 03DE   {
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
; 0000 03DF   SET_SPIC_SS_LOW                 //OSD_CS = 0;                     // Selecting the OSD click
;	x -> Y+4
;	y -> Y+2
;	symbol -> Y+0
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 1
; 0000 03E0   delay_us(1);                    //
;PCODE: $000002D4 VOL: 0
; 0000 03E1   SPI1_Write(0x05);               // Address to Display Memory Address High
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
; 0000 03E2   if( ( x * 30 + y ) <= 255 )
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
; 0000 03E3     SPI1_Write(0);                // For first 255 matrix positions Write 0
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
; 0000 03E4   else
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
; 0000 03E5     SPI1_Write(1);                // For the rest of matrix positions Write 1
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
; 0000 03E6   delay_us(1);
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
; 0000 03E7   SET_SPIC_SS_HIGH                //OSD_CS = 1;                     // Deselecting the OSD click
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 1
; 0000 03E8   delay_us(10);
;PCODE: $000002EB VOL: 0
; 0000 03E9 
; 0000 03EA   MAX7456_SPI_WRITE(0x06, x * 30 + y );  // Set position in display matrix(16x30)
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
; 0000 03EB   MAX7456_SPI_WRITE(0x07, symbol);       // Set character on selected position
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
; 0000 03EC }
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
;////////////////////////////////////////////////function////////////////////////////////////////////////////////////////////////////////////////////////////
;void com_reset(void)                        // ¸í·É¾î¹öÆÛ ÃÊ±âÈ­
; 0000 03EF {
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
; 0000 03F0    for(command_size=30 ; command_size>0; command_size--) command[command_size]=NULL;
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
; 0000 03F1 command_flag=0;
;PCODE: $00000314 VOL: 0
;PCODE: $00000315 VOL: 0
; 0000 03F2 }
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
;void check(void)                             // µ¿ÀÛÃ¼Å©
; 0000 03F4 {
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
; 0000 03F5     static int a=0;
; 0000 03F6     MAX7456_Write(row_pointer,  col_pointer, OSDchr['C']);
;PCODE: $0000031A VOL: 0
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
;PCODE: $00000320 VOL: 0
; 0000 03F7     MAX7456_Write(row_pointer+2,  col_pointer+2, OSDchr['K']);
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
; 0000 03F8     MAX7456_Write(row_pointer+1,  col_pointer+1, OSDchr['0'+a]);
;PCODE: $0000032C VOL: 0
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
;PCODE: $00000335 VOL: 0
;PCODE: $00000336 VOL: 0
;PCODE: $00000337 VOL: 0
;PCODE: $00000338 VOL: 0
; 0000 03F9     MAX7456_Write(row_pointer+3,  col_pointer+3, OSDchr['0'+a]);
;PCODE: $00000339 VOL: 0
;PCODE: $0000033A VOL: 0
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
;PCODE: $0000033F VOL: 0
;PCODE: $00000340 VOL: 0
;PCODE: $00000341 VOL: 0
;PCODE: $00000342 VOL: 0
;PCODE: $00000343 VOL: 0
;PCODE: $00000344 VOL: 0
;PCODE: $00000345 VOL: 0
; 0000 03FA     if(a>=9)
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
;PCODE: $00000348 VOL: 0
; 0000 03FB     a=0;
;PCODE: $00000349 VOL: 0
;PCODE: $0000034A VOL: 0
; 0000 03FC     else
;PCODE: $0000034B VOL: 0
;PCODE: $0000034C VOL: 0
; 0000 03FD     a++;
;PCODE: $0000034D VOL: 0
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
; 0000 03FE     puts("CHECK!\r");
;PCODE: $00000350 VOL: 0
;PCODE: $00000351 VOL: 0
;PCODE: $00000352 VOL: 0
;PCODE: $00000353 VOL: 0
;PCODE: $00000354 VOL: 0
; 0000 03FF }
;PCODE: $00000355 VOL: 0
;PCODE: $00000356 VOL: 0

	.DSEG
_0x30:
	.BYTE 0x8
;void clear(void)
; 0000 0401 {

	.CSEG
;PCODE: $00000357 VOL: 0
;PCODE: $00000358 VOL: 0
; 0000 0402     MAX7456_SPI_WRITE(0x04, 0x04);         // RAMÃÊ±âÈ­(È­¸éÃÊ±âÈ­)
;PCODE: $00000359 VOL: 0
;PCODE: $0000035A VOL: 0
;PCODE: $0000035B VOL: 0
;PCODE: $0000035C VOL: 0
;PCODE: $0000035D VOL: 0
; 0000 0403     puts("CLEAR!\r");
;PCODE: $0000035E VOL: 0
;PCODE: $0000035F VOL: 0
;PCODE: $00000360 VOL: 0
;PCODE: $00000361 VOL: 0
; 0000 0404 }
;PCODE: $00000362 VOL: 0
;PCODE: $00000363 VOL: 0

	.DSEG
_0x31:
	.BYTE 0x8
;void on(void)
; 0000 0406 {

	.CSEG
;PCODE: $00000364 VOL: 0
;PCODE: $00000365 VOL: 0
; 0000 0407     MAX7456_SPI_WRITE(0x00, 0x0c);         // OSD ON
;PCODE: $00000366 VOL: 0
;PCODE: $00000367 VOL: 0
;PCODE: $00000368 VOL: 0
;PCODE: $00000369 VOL: 0
;PCODE: $0000036A VOL: 0
; 0000 0408     puts("OSD ON!\r");
;PCODE: $0000036B VOL: 0
;PCODE: $0000036C VOL: 0
;PCODE: $0000036D VOL: 0
;PCODE: $0000036E VOL: 0
; 0000 0409 }
;PCODE: $0000036F VOL: 0
;PCODE: $00000370 VOL: 0

	.DSEG
_0x32:
	.BYTE 0x9
;void off(void)
; 0000 040B {

	.CSEG
;PCODE: $00000371 VOL: 0
;PCODE: $00000372 VOL: 0
; 0000 040C     MAX7456_SPI_WRITE(0x00, 0x04);         // OSD OFF
;PCODE: $00000373 VOL: 0
;PCODE: $00000374 VOL: 0
;PCODE: $00000375 VOL: 0
;PCODE: $00000376 VOL: 0
;PCODE: $00000377 VOL: 0
; 0000 040D     puts("OSD OFF!\r");
;PCODE: $00000378 VOL: 0
;PCODE: $00000379 VOL: 0
;PCODE: $0000037A VOL: 0
;PCODE: $0000037B VOL: 0
; 0000 040E }
;PCODE: $0000037C VOL: 0
;PCODE: $0000037D VOL: 0

	.DSEG
_0x33:
	.BYTE 0xA
;void col(char value)                        // °¡·Î ¸î¹øÂ° Ä­¿¡ ¾µ°ÍÀÎÁö °áÁ¤(1~27)
; 0000 0410 {

	.CSEG
;PCODE: $0000037E VOL: 0
;PCODE: $0000037F VOL: 0
; 0000 0411     if(value=='0')                                          // 1~9 Ä­ Áß
;	value -> Y+0
;PCODE: $00000380 VOL: 0
;PCODE: $00000381 VOL: 0
;PCODE: $00000382 VOL: 0
; 0000 0412     {
; 0000 0413         col_pointer=(int)(command[4]-'0');                  // Æ÷ÀÎÅÍ°ª¿¡ ¿ÞÂÊºÎÅÍ ¸î¹øÂ°Ä­ÀÎÁö ÁöÁ¤
;PCODE: $00000383 VOL: 0
;PCODE: $00000384 VOL: 0
;PCODE: $00000385 VOL: 0
;PCODE: $00000386 VOL: 0
;PCODE: $00000387 VOL: 0
; 0000 0414     }
; 0000 0415     else if(value=='1')                                     // 10~19 Ä­ Áß
;PCODE: $00000388 VOL: 0
;PCODE: $00000389 VOL: 0
;PCODE: $0000038A VOL: 0
;PCODE: $0000038B VOL: 0
;PCODE: $0000038C VOL: 0
; 0000 0416     {
; 0000 0417         col_pointer=(int)(command[4]-'0'+10);
;PCODE: $0000038D VOL: 0
;PCODE: $0000038E VOL: 0
;PCODE: $0000038F VOL: 0
;PCODE: $00000390 VOL: 0
;PCODE: $00000391 VOL: 0
;PCODE: $00000392 VOL: 0
; 0000 0418     }
; 0000 0419     else if(value=='2')                                     // 20~27 Ä­ Áß
;PCODE: $00000393 VOL: 0
;PCODE: $00000394 VOL: 0
;PCODE: $00000395 VOL: 0
;PCODE: $00000396 VOL: 0
;PCODE: $00000397 VOL: 0
; 0000 041A     {
; 0000 041B         if(command[4]>'7') puts("range of column is 1~27\r");
;PCODE: $00000398 VOL: 0
;PCODE: $00000399 VOL: 0
;PCODE: $0000039A VOL: 0
;PCODE: $0000039B VOL: 0
;PCODE: $0000039C VOL: 0
;PCODE: $0000039D VOL: 0
;PCODE: $0000039E VOL: 0
;PCODE: $0000039F VOL: 0
; 0000 041C         else
;PCODE: $000003A0 VOL: 0
;PCODE: $000003A1 VOL: 0
; 0000 041D         col_pointer=((int)command[4]-'0'+20);
;PCODE: $000003A2 VOL: 0
;PCODE: $000003A3 VOL: 0
;PCODE: $000003A4 VOL: 0
;PCODE: $000003A5 VOL: 0
;PCODE: $000003A6 VOL: 0
;PCODE: $000003A7 VOL: 0
; 0000 041E     }
;PCODE: $000003A8 VOL: 0
; 0000 041F     else puts("range of column is 1~27\r");
;PCODE: $000003A9 VOL: 0
;PCODE: $000003AA VOL: 0
;PCODE: $000003AB VOL: 0
;PCODE: $000003AC VOL: 0
;PCODE: $000003AD VOL: 0
;PCODE: $000003AE VOL: 0
; 0000 0420     puts("Col Pointer : ");
;PCODE: $000003AF VOL: 0
;PCODE: $000003B0 VOL: 0
;PCODE: $000003B1 VOL: 0
;PCODE: $000003B2 VOL: 0
;PCODE: $000003B3 VOL: 0
;PCODE: $000003B4 VOL: 0
;PCODE: $000003B5 VOL: 0
; 0000 0421     putchar('0'+col_pointer/100);
;PCODE: $000003B6 VOL: 0
;PCODE: $000003B7 VOL: 0
;PCODE: $000003B8 VOL: 0
;PCODE: $000003B9 VOL: 0
;PCODE: $000003BA VOL: 0
;PCODE: $000003BB VOL: 0
; 0000 0422     putchar('0'+col_pointer%100/10);
;PCODE: $000003BC VOL: 0
;PCODE: $000003BD VOL: 0
;PCODE: $000003BE VOL: 0
;PCODE: $000003BF VOL: 0
;PCODE: $000003C0 VOL: 0
;PCODE: $000003C1 VOL: 0
;PCODE: $000003C2 VOL: 0
;PCODE: $000003C3 VOL: 0
;PCODE: $000003C4 VOL: 0
; 0000 0423     putchar('0'+col_pointer%10);
;PCODE: $000003C5 VOL: 0
;PCODE: $000003C6 VOL: 0
;PCODE: $000003C7 VOL: 0
;PCODE: $000003C8 VOL: 0
;PCODE: $000003C9 VOL: 0
;PCODE: $000003CA VOL: 0
; 0000 0424     puts("\r");
;PCODE: $000003CB VOL: 0
;PCODE: $000003CC VOL: 0
;PCODE: $000003CD VOL: 0
;PCODE: $000003CE VOL: 0
; 0000 0425 }
;PCODE: $000003CF VOL: 0
;PCODE: $000003D0 VOL: 0
;PCODE: $000003D1 VOL: 0

	.DSEG
_0x3A:
	.BYTE 0x43
;void row(char value)                                        // ¼¼·Î ¸î¹øÂ° ÁÙ¿¡ ¾µ°ÍÀÎÁö °áÁ¤(1~12)
; 0000 0427 {

	.CSEG
;PCODE: $000003D2 VOL: 0
;PCODE: $000003D3 VOL: 0
; 0000 0428     if(value=='0')
;	value -> Y+0
;PCODE: $000003D4 VOL: 0
;PCODE: $000003D5 VOL: 0
;PCODE: $000003D6 VOL: 0
; 0000 0429     {                                                       // 1~9 ÁÙ Áß
; 0000 042A         row_pointer=(int)(command[4]-'0');                  // Æ÷ÀÎÅÍ°ª¿¡ ¿ÞÂÊºÎÅÍ ¸î¹øÂ°Ä­ÀÎÁö ÁöÁ¤
;PCODE: $000003D7 VOL: 0
;PCODE: $000003D8 VOL: 0
;PCODE: $000003D9 VOL: 0
;PCODE: $000003DA VOL: 0
;PCODE: $000003DB VOL: 0
; 0000 042B     }
; 0000 042C     else if(value=='1')                                     // 10~12 ÁÙ Áß
;PCODE: $000003DC VOL: 0
;PCODE: $000003DD VOL: 0
;PCODE: $000003DE VOL: 0
;PCODE: $000003DF VOL: 0
;PCODE: $000003E0 VOL: 0
; 0000 042D     {
; 0000 042E         if(command[4]>'2') puts("range of row is 1~12\r");
;PCODE: $000003E1 VOL: 0
;PCODE: $000003E2 VOL: 0
;PCODE: $000003E3 VOL: 0
;PCODE: $000003E4 VOL: 0
;PCODE: $000003E5 VOL: 0
;PCODE: $000003E6 VOL: 0
;PCODE: $000003E7 VOL: 0
;PCODE: $000003E8 VOL: 0
; 0000 042F         else
;PCODE: $000003E9 VOL: 0
;PCODE: $000003EA VOL: 0
; 0000 0430         row_pointer=((int)command[4]-'0'+10);
;PCODE: $000003EB VOL: 0
;PCODE: $000003EC VOL: 0
;PCODE: $000003ED VOL: 0
;PCODE: $000003EE VOL: 0
;PCODE: $000003EF VOL: 0
;PCODE: $000003F0 VOL: 0
; 0000 0431     }
;PCODE: $000003F1 VOL: 0
; 0000 0432     else puts("range of row is 1~12\r");
;PCODE: $000003F2 VOL: 0
;PCODE: $000003F3 VOL: 0
;PCODE: $000003F4 VOL: 0
;PCODE: $000003F5 VOL: 0
;PCODE: $000003F6 VOL: 0
;PCODE: $000003F7 VOL: 0
; 0000 0433     puts("Row Pointer : ");
;PCODE: $000003F8 VOL: 0
;PCODE: $000003F9 VOL: 0
;PCODE: $000003FA VOL: 0
;PCODE: $000003FB VOL: 0
;PCODE: $000003FC VOL: 0
;PCODE: $000003FD VOL: 0
; 0000 0434     putchar('0'+row_pointer/100);
;PCODE: $000003FE VOL: 0
;PCODE: $000003FF VOL: 0
;PCODE: $00000400 VOL: 0
;PCODE: $00000401 VOL: 0
;PCODE: $00000402 VOL: 0
;PCODE: $00000403 VOL: 0
; 0000 0435     putchar('0'+row_pointer%100/10);
;PCODE: $00000404 VOL: 0
;PCODE: $00000405 VOL: 0
;PCODE: $00000406 VOL: 0
;PCODE: $00000407 VOL: 0
;PCODE: $00000408 VOL: 0
;PCODE: $00000409 VOL: 0
;PCODE: $0000040A VOL: 0
;PCODE: $0000040B VOL: 0
;PCODE: $0000040C VOL: 0
; 0000 0436     putchar('0'+row_pointer%10);
;PCODE: $0000040D VOL: 0
;PCODE: $0000040E VOL: 0
;PCODE: $0000040F VOL: 0
;PCODE: $00000410 VOL: 0
;PCODE: $00000411 VOL: 0
;PCODE: $00000412 VOL: 0
; 0000 0437     puts("\r");
;PCODE: $00000413 VOL: 0
;PCODE: $00000414 VOL: 0
;PCODE: $00000415 VOL: 0
;PCODE: $00000416 VOL: 0
; 0000 0438 }
;PCODE: $00000417 VOL: 0
;PCODE: $00000418 VOL: 0
;PCODE: $00000419 VOL: 0

	.DSEG
_0x41:
	.BYTE 0x3D
;void chat()       // ->¹®ÀÚÀÔ·Â; ÇßÀ» ½Ã OSD¿¡ ¹®ÀÚÀÔ·ÂÀÌ ³ª¿Àµµ·ÏÇÔ
; 0000 043A {

	.CSEG
;PCODE: $0000041A VOL: 0
;PCODE: $0000041B VOL: 0
; 0000 043B     int j,k;
; 0000 043C     for(j=1;j<30;j++)                                       // ->(command[1])ÀÌÈÄ ;°¡ ³ª¿Ã¶§±îÁö ucÀÇ ÃÑ ±æÀÌ´Â 0~29
;PCODE: $0000041C VOL: 0
;	j -> R16,R17
;	k -> R18,R19
;PCODE: $0000041D VOL: 0
;PCODE: $0000041E VOL: 0
;PCODE: $0000041F VOL: 0
;PCODE: $00000420 VOL: 0
;PCODE: $00000421 VOL: 0
;PCODE: $00000422 VOL: 0
;PCODE: $00000423 VOL: 0
;PCODE: $00000424 VOL: 0
;PCODE: $00000425 VOL: 0
; 0000 043D         {
; 0000 043E             k=j;                                            // j°ªÀº ¼øÂ÷ÀûÀ¸·Î k·Î ÀúÀåÇÏ°í 2,3,4,5,....28, 29
;PCODE: $00000426 VOL: 0
;PCODE: $00000427 VOL: 0
; 0000 043F             if(command[k]==';' && command[k+1]==13)          // (command[2], command[3]... command[29]Áß¿¡) command[k]¿¡ ; °¡ ³ª¿À¸é
;PCODE: $00000428 VOL: 0
;PCODE: $00000429 VOL: 0
;PCODE: $0000042A VOL: 0
;PCODE: $0000042B VOL: 0
;PCODE: $0000042C VOL: 0
;PCODE: $0000042D VOL: 0
;PCODE: $0000042E VOL: 0
;PCODE: $0000042F VOL: 0
;PCODE: $00000430 VOL: 0
;PCODE: $00000431 VOL: 0
;PCODE: $00000432 VOL: 0
;PCODE: $00000433 VOL: 0
;PCODE: $00000434 VOL: 0
;PCODE: $00000435 VOL: 0
;PCODE: $00000436 VOL: 0
; 0000 0440             {
; 0000 0441                 col_pointer=col_pointer+(k-1);              // Æ÷ÀÎÅÍ¸¦ ÀÔ·ÂµÈ ¹®ÀÚ°³¼ö¿¡ À§Ä¡½ÃÅ´ ex) >abcde;¶ó¸é >;¸¦ Á¦¿ÜÇÏ°í ÃÑ 5°³ ±ÛÀÚ¸¸Å­ Æ÷ÀÎÅÍ¸¦ ÀÌµ¿
;PCODE: $00000437 VOL: 0
;PCODE: $00000438 VOL: 0
;PCODE: $00000439 VOL: 0
;PCODE: $0000043A VOL: 0
; 0000 0442                 //command[k]=NULL;                          // ÇØ´ç ';'°¡ µé¾îÀÖ´Â ¸í·É¾î¹è¿­Àº ºñ¿ò
; 0000 0443                 for(k=k-1 ; k>0; k--)                       // ÀÔ·ÂµÈ ¹®ÀÚ°³¼ö¸¸Å­                 ex) abcde; ¿¡¼­ ;¸¦ »«¸¸Å­
;PCODE: $0000043B VOL: 0
;PCODE: $0000043C VOL: 0
;PCODE: $0000043D VOL: 0
;PCODE: $0000043E VOL: 0
;PCODE: $0000043F VOL: 0
;PCODE: $00000440 VOL: 0
;PCODE: $00000441 VOL: 0
;PCODE: $00000442 VOL: 0
; 0000 0444                 {
; 0000 0445                     col_pointer--;                          // Æ÷ÀÎÅÍ¸¦ ¿ª¼øÀ¸·Î
;PCODE: $00000443 VOL: 0
;PCODE: $00000444 VOL: 0
;PCODE: $00000445 VOL: 0
; 0000 0446                     MAX7456_Write(row_pointer, col_pointer, OSDchr[command[k]]);    // ÀÔ·ÂµÈ ±ÛÀÚ¸¦ Ãâ·ÂÇØ¾ß È­¸é¿£ abcde·Î º¸ÀÓ
;PCODE: $00000446 VOL: 0
;PCODE: $00000447 VOL: 0
;PCODE: $00000448 VOL: 0
;PCODE: $00000449 VOL: 0
;PCODE: $0000044A VOL: 0
;PCODE: $0000044B VOL: 0
;PCODE: $0000044C VOL: 0
;PCODE: $0000044D VOL: 0
;PCODE: $0000044E VOL: 0
;PCODE: $0000044F VOL: 0
;PCODE: $00000450 VOL: 0
; 0000 0447                 }
;PCODE: $00000451 VOL: 0
;PCODE: $00000452 VOL: 0
;PCODE: $00000453 VOL: 0
;PCODE: $00000454 VOL: 0
;PCODE: $00000455 VOL: 0
; 0000 0448                                                            //È­¸éÃâ·Â
; 0000 0449                 puts("CHAT!\r");
;PCODE: $00000456 VOL: 0
;PCODE: $00000457 VOL: 0
;PCODE: $00000458 VOL: 0
;PCODE: $00000459 VOL: 0
; 0000 044A                 com_reset();
;PCODE: $0000045A VOL: 0
; 0000 044B             }
; 0000 044C         }
;PCODE: $0000045B VOL: 0
;PCODE: $0000045C VOL: 0
;PCODE: $0000045D VOL: 0
;PCODE: $0000045E VOL: 0
;PCODE: $0000045F VOL: 0
;PCODE: $00000460 VOL: 0
; 0000 044D }
;PCODE: $00000461 VOL: 0
;PCODE: $00000462 VOL: 0
;PCODE: $00000463 VOL: 0
;PCODE: $00000464 VOL: 0

	.DSEG
_0x4D:
	.BYTE 0x7
;void title()
; 0000 044F {

	.CSEG
;PCODE: $00000465 VOL: 0
;PCODE: $00000466 VOL: 0
; 0000 0450     int j,k;
; 0000 0451     for(j=3;j<30;j++)                                                           // ->(command[1])ÀÌÈÄ ;°¡ ³ª¿Ã¶§±îÁö ucÀÇ ÃÑ ±æÀÌ´Â 0~29
;PCODE: $00000467 VOL: 0
;	j -> R16,R17
;	k -> R18,R19
;PCODE: $00000468 VOL: 0
;PCODE: $00000469 VOL: 0
;PCODE: $0000046A VOL: 0
;PCODE: $0000046B VOL: 0
;PCODE: $0000046C VOL: 0
;PCODE: $0000046D VOL: 0
;PCODE: $0000046E VOL: 0
;PCODE: $0000046F VOL: 0
;PCODE: $00000470 VOL: 0
; 0000 0452         {
; 0000 0453             k=j;                                                                // j°ªÀº ¼øÂ÷ÀûÀ¸·Î k·Î ÀúÀåÇÏ°í 2,3,4,5,....28, 29
;PCODE: $00000471 VOL: 0
;PCODE: $00000472 VOL: 0
; 0000 0454             if(command[k]==';' && command[k+1]==13)                             // (command[2], command[3]... command[29]Áß¿¡) command[k]¿¡ ; °¡ ³ª¿À¸é
;PCODE: $00000473 VOL: 0
;PCODE: $00000474 VOL: 0
;PCODE: $00000475 VOL: 0
;PCODE: $00000476 VOL: 0
;PCODE: $00000477 VOL: 0
;PCODE: $00000478 VOL: 0
;PCODE: $00000479 VOL: 0
;PCODE: $0000047A VOL: 0
;PCODE: $0000047B VOL: 0
;PCODE: $0000047C VOL: 0
;PCODE: $0000047D VOL: 0
;PCODE: $0000047E VOL: 0
;PCODE: $0000047F VOL: 0
;PCODE: $00000480 VOL: 0
;PCODE: $00000481 VOL: 0
; 0000 0455             {
; 0000 0456                 title_pointer = title_pointer+(k-3);                            // Æ÷ÀÎÅÍ¸¦ ÀÔ·ÂµÈ ¹®ÀÚ°³¼ö¿¡ À§Ä¡½ÃÅ´ ex) >abcde;¶ó¸é >;¸¦ Á¦¿ÜÇÏ°í ÃÑ 5°³ ±ÛÀÚ¸¸Å­ Æ÷ÀÎÅÍ¸¦ ÀÌµ¿
;PCODE: $00000482 VOL: 0
;PCODE: $00000483 VOL: 0
;PCODE: $00000484 VOL: 0
;PCODE: $00000485 VOL: 0
; 0000 0457                 if(title_pointer>=18) puts("Title is too long!(Max:15)\r");     // ÃÖ´ë 15±ÛÀÚ±îÁö Ãâ·ÂÁ¦ÇÑ
;PCODE: $00000486 VOL: 0
;PCODE: $00000487 VOL: 0
;PCODE: $00000488 VOL: 0
;PCODE: $00000489 VOL: 0
;PCODE: $0000048A VOL: 0
;PCODE: $0000048B VOL: 0
;PCODE: $0000048C VOL: 0
; 0000 0458                 else
;PCODE: $0000048D VOL: 0
;PCODE: $0000048E VOL: 0
; 0000 0459                 {
; 0000 045A                     for(k=k-1 ; k>2; k--)                                       // ÀÔ·ÂµÈ ¹®ÀÚ°³¼ö¸¸Å­                 ex) abcde; ¿¡¼­ ;¸¦ »«¸¸Å­
;PCODE: $0000048F VOL: 0
;PCODE: $00000490 VOL: 0
;PCODE: $00000491 VOL: 0
;PCODE: $00000492 VOL: 0
;PCODE: $00000493 VOL: 0
;PCODE: $00000494 VOL: 0
;PCODE: $00000495 VOL: 0
;PCODE: $00000496 VOL: 0
;PCODE: $00000497 VOL: 0
; 0000 045B                     {
; 0000 045C                       title_pointer--;                                          // Æ÷ÀÎÅÍ¸¦ ¿ª¼øÀ¸·Î
;PCODE: $00000498 VOL: 0
;PCODE: $00000499 VOL: 0
;PCODE: $0000049A VOL: 0
; 0000 045D                       MAX7456_Write(11, title_pointer, OSDchr[command[k]]);     // ÀÔ·ÂµÈ ±ÛÀÚ¸¦ Ãâ·ÂÇØ¾ß È­¸é¿£ abcde·Î º¸ÀÓ
;PCODE: $0000049B VOL: 0
;PCODE: $0000049C VOL: 0
;PCODE: $0000049D VOL: 0
;PCODE: $0000049E VOL: 0
;PCODE: $0000049F VOL: 0
;PCODE: $000004A0 VOL: 0
;PCODE: $000004A1 VOL: 0
;PCODE: $000004A2 VOL: 0
;PCODE: $000004A3 VOL: 0
;PCODE: $000004A4 VOL: 0
;PCODE: $000004A5 VOL: 0
;PCODE: $000004A6 VOL: 0
; 0000 045E                     }
;PCODE: $000004A7 VOL: 0
;PCODE: $000004A8 VOL: 0
;PCODE: $000004A9 VOL: 0
;PCODE: $000004AA VOL: 0
;PCODE: $000004AB VOL: 0
; 0000 045F                     puts("TITLE!\r");                                           //È­¸éÃâ·Â
;PCODE: $000004AC VOL: 0
;PCODE: $000004AD VOL: 0
;PCODE: $000004AE VOL: 0
;PCODE: $000004AF VOL: 0
; 0000 0460                 }
;PCODE: $000004B0 VOL: 0
; 0000 0461                 com_reset();
;PCODE: $000004B1 VOL: 0
; 0000 0462             }
; 0000 0463         }
;PCODE: $000004B2 VOL: 0
;PCODE: $000004B3 VOL: 0
;PCODE: $000004B4 VOL: 0
;PCODE: $000004B5 VOL: 0
;PCODE: $000004B6 VOL: 0
;PCODE: $000004B7 VOL: 0
; 0000 0464 }
;PCODE: $000004B8 VOL: 0
;PCODE: $000004B9 VOL: 0
;PCODE: $000004BA VOL: 0
;PCODE: $000004BB VOL: 0

	.DSEG
_0x55:
	.BYTE 0x24
;////////////////////////////////////////////////////////////encorder////////////////////////////////////////////////////////////////
;void init_LS7366(void) {
; 0000 0466 void init_LS7366(void) {

	.CSEG
;PCODE: $000004BC VOL: 0
;PCODE: $000004BD VOL: 0
; 0000 0467 
; 0000 0468  LS7366_SS_L_H                                 // Initialize SS
;PCODE: $000004BE VOL: 0
;PCODE: $000004BF VOL: 1
; 0000 0469 
; 0000 046A  LS7366_SS_H_L                                 // Set MDR0 X4 Count Mode
;PCODE: $000004C0 VOL: 0
;PCODE: $000004C1 VOL: 1
; 0000 046B  spid_master_tx_rx(SELECT_MDR0 | WR_REG);
;PCODE: $000004C2 VOL: 0
;PCODE: $000004C3 VOL: 0
;PCODE: $000004C4 VOL: 0
; 0000 046C  spid_master_tx_rx(X1_QUAD | FREE_RUN | DISABLE_INDEX | SYNCHRONOUS_INDEX | FILTER_CDF_1 );
;PCODE: $000004C5 VOL: 0
;PCODE: $000004C6 VOL: 0
;PCODE: $000004C7 VOL: 0
; 0000 046D  LS7366_SS_L_H
;PCODE: $000004C8 VOL: 0
;PCODE: $000004C9 VOL: 1
; 0000 046E 
; 0000 046F  LS7366_SS_H_L                                 // Set MDR1 4 Bytes Counter Mode
;PCODE: $000004CA VOL: 0
;PCODE: $000004CB VOL: 1
; 0000 0470  spid_master_tx_rx(SELECT_MDR1 | WR_REG);
;PCODE: $000004CC VOL: 0
;PCODE: $000004CD VOL: 0
;PCODE: $000004CE VOL: 0
; 0000 0471  spid_master_tx_rx(FOUR_BYTE_COUNT_MODE | ENABLE_COUNTING);
;PCODE: $000004CF VOL: 0
;PCODE: $000004D0 VOL: 0
;PCODE: $000004D1 VOL: 0
; 0000 0472  LS7366_SS_L_H
;PCODE: $000004D2 VOL: 0
;PCODE: $000004D3 VOL: 1
; 0000 0473 
; 0000 0474  LS7366_SS_H_L                               // Clear(0) CNTR Register
;PCODE: $000004D4 VOL: 0
;PCODE: $000004D5 VOL: 1
; 0000 0475  spid_master_tx_rx(SELECT_CNTR | CLR_REG);
;PCODE: $000004D6 VOL: 0
;PCODE: $000004D7 VOL: 0
;PCODE: $000004D8 VOL: 0
; 0000 0476  LS7366_SS_L_H
;PCODE: $000004D9 VOL: 0
;PCODE: $000004DA VOL: 1
; 0000 0477 }
;PCODE: $000004DB VOL: 0
;PCODE: $000004DC VOL: 0
;
;void reset_LS7366(void)
; 0000 047A {
;PCODE: $000004DD VOL: 0
;PCODE: $000004DE VOL: 0
; 0000 047B     LS7366_SS_H_L
;PCODE: $000004DF VOL: 0
;PCODE: $000004E0 VOL: 1
; 0000 047C     spid_master_tx_rx(SELECT_CNTR | CLR_REG);
;PCODE: $000004E1 VOL: 0
;PCODE: $000004E2 VOL: 0
;PCODE: $000004E3 VOL: 0
; 0000 047D     LS7366_SS_L_H
;PCODE: $000004E4 VOL: 0
;PCODE: $000004E5 VOL: 1
; 0000 047E }
;PCODE: $000004E6 VOL: 0
;PCODE: $000004E7 VOL: 0
;
;
;unsigned int encorder_pointer;
;char temp[30]="";
;void putstringc1(char *command)
; 0000 0484 {
;PCODE: $000004E8 VOL: 0
;PCODE: $000004E9 VOL: 0
; 0000 0485     int i=0;
; 0000 0486     while(*(command+i) !=0)
;PCODE: $000004EA VOL: 0
;PCODE: $000004EB VOL: 0
;	*command -> Y+2
;	i -> R16,R17
;PCODE: $000004EC VOL: 0
;PCODE: $000004ED VOL: 0
;PCODE: $000004EE VOL: 0
;PCODE: $000004EF VOL: 0
;PCODE: $000004F0 VOL: 0
;PCODE: $000004F1 VOL: 0
;PCODE: $000004F2 VOL: 0
;PCODE: $000004F3 VOL: 0
;PCODE: $000004F4 VOL: 0
; 0000 0487     {
; 0000 0488         putchar(*(command+i));
;PCODE: $000004F5 VOL: 0
;PCODE: $000004F6 VOL: 0
;PCODE: $000004F7 VOL: 0
;PCODE: $000004F8 VOL: 0
;PCODE: $000004F9 VOL: 0
;PCODE: $000004FA VOL: 0
; 0000 0489         MAX7456_Write(1, encorder_pointer, OSDchr[*(command+i)]);
;PCODE: $000004FB VOL: 0
;PCODE: $000004FC VOL: 0
;PCODE: $000004FD VOL: 0
;PCODE: $000004FE VOL: 0
;PCODE: $000004FF VOL: 0
;PCODE: $00000500 VOL: 0
;PCODE: $00000501 VOL: 0
;PCODE: $00000502 VOL: 0
;PCODE: $00000503 VOL: 0
;PCODE: $00000504 VOL: 0
;PCODE: $00000505 VOL: 0
;PCODE: $00000506 VOL: 0
;PCODE: $00000507 VOL: 0
;PCODE: $00000508 VOL: 0
; 0000 048A         encorder_pointer+=1;
;PCODE: $00000509 VOL: 0
;PCODE: $0000050A VOL: 0
;PCODE: $0000050B VOL: 0
; 0000 048B         temp[i]=*(command+i);       //encorderÀÇ Ãâ·Â °ªÀÌ ´ÙÀ½Å¸ÀÌ¹Ö(10ms)ÀÌÈÄ µé¾î¿Â °ª°ú °°ÀºÁö È®ÀÎÇÏ±âÀ§ÇÑ ¿ëµµÀÇº¯¼ö(Áßº¹µÈ °ªÀ» È­¸é¿¡ Ãâ·ÂÇÏ´Â ³¶ºñ¸¦ ¸·±âÀ§ÇØ)
;PCODE: $0000050C VOL: 0
;PCODE: $0000050D VOL: 0
;PCODE: $0000050E VOL: 0
;PCODE: $0000050F VOL: 0
;PCODE: $00000510 VOL: 0
;PCODE: $00000511 VOL: 0
;PCODE: $00000512 VOL: 0
;PCODE: $00000513 VOL: 0
;PCODE: $00000514 VOL: 0
; 0000 048C         temp[i+1]=NULL;
;PCODE: $00000515 VOL: 0
;PCODE: $00000516 VOL: 0
;PCODE: $00000517 VOL: 0
;PCODE: $00000518 VOL: 0
;PCODE: $00000519 VOL: 0
; 0000 048D         i++;
;PCODE: $0000051A VOL: 0
;PCODE: $0000051B VOL: 0
; 0000 048E     }
;PCODE: $0000051C VOL: 0
;PCODE: $0000051D VOL: 0
; 0000 048F     MAX7456_Write(1, encorder_pointer, OSDchr[' ']);    //encorder°ªÀÌ ¿¹¸¦µé¾î 1234¿´´Ù°¡ 123ÀÌµÇ¸é µÚ¿¡ 4¿¡ ´ëÇÑ ÀÜ»óÀÌ ³²´Â´Ù ±×°ÍÀ» Áö¿ì±âÀ§ÇØ 123µÚ¿¡ ' ' À» ³Ö¾îÁØ´Ù.
;PCODE: $0000051E VOL: 0
;PCODE: $0000051F VOL: 0
;PCODE: $00000520 VOL: 0
;PCODE: $00000521 VOL: 0
;PCODE: $00000522 VOL: 0
;PCODE: $00000523 VOL: 0
;PCODE: $00000524 VOL: 0
;PCODE: $00000525 VOL: 0
;PCODE: $00000526 VOL: 0
; 0000 0490     encorder_pointer-=i;
;PCODE: $00000527 VOL: 0
;PCODE: $00000528 VOL: 0
;PCODE: $00000529 VOL: 0
; 0000 0491     puts("\r");
;PCODE: $0000052A VOL: 0
;PCODE: $0000052B VOL: 0
;PCODE: $0000052C VOL: 0
;PCODE: $0000052D VOL: 0
; 0000 0492 }
;PCODE: $0000052E VOL: 0
;PCODE: $0000052F VOL: 0
;PCODE: $00000530 VOL: 0
;PCODE: $00000531 VOL: 0
;PCODE: $00000532 VOL: 0
;PCODE: $00000533 VOL: 0
;PCODE: $00000534 VOL: 0

	.DSEG
_0x5D:
	.BYTE 0x2
;////////////////////////////////////////////////////////////////RTC/////////////////////////////////////////////////////////////////
;unsigned char timer_pointer=1;
;unsigned char hour=0;
;void ontime_hour(void)
; 0000 0497 {

	.CSEG
;PCODE: $00000535 VOL: 0
;PCODE: $00000536 VOL: 0
; 0000 0498     //hour=s%86400;
; 0000 0499     int a=RTC_sec%86400;
; 0000 049A     if(hour>=23 || a==0) hour=0;
;PCODE: $00000537 VOL: 0
;PCODE: $00000538 VOL: 0
;	a -> R16,R17
;PCODE: $00000539 VOL: 0
;PCODE: $0000053A VOL: 0
;PCODE: $0000053B VOL: 0
;PCODE: $0000053C VOL: 0
;PCODE: $0000053D VOL: 0
;PCODE: $0000053E VOL: 0
;PCODE: $0000053F VOL: 0
;PCODE: $00000540 VOL: 0
;PCODE: $00000541 VOL: 0
;PCODE: $00000542 VOL: 0
;PCODE: $00000543 VOL: 0
;PCODE: $00000544 VOL: 0
;PCODE: $00000545 VOL: 0
; 0000 049B     else hour++;
;PCODE: $00000546 VOL: 0
;PCODE: $00000547 VOL: 0
;PCODE: $00000548 VOL: 0
;PCODE: $00000549 VOL: 0
;PCODE: $0000054A VOL: 0
; 0000 049C     timer_pointer+=2;
;PCODE: $0000054B VOL: 0
;PCODE: $0000054C VOL: 0
;PCODE: $0000054D VOL: 0
;PCODE: $0000054E VOL: 0
; 0000 049D     MAX7456_Write(1, timer_pointer, OSDchr[':']);               // :
;PCODE: $0000054F VOL: 0
;PCODE: $00000550 VOL: 0
;PCODE: $00000551 VOL: 0
;PCODE: $00000552 VOL: 0
;PCODE: $00000553 VOL: 0
;PCODE: $00000554 VOL: 0
;PCODE: $00000555 VOL: 0
;PCODE: $00000556 VOL: 0
;PCODE: $00000557 VOL: 0
;PCODE: $00000558 VOL: 0
; 0000 049E     timer_pointer--;
;PCODE: $00000559 VOL: 0
;PCODE: $0000055A VOL: 0
;PCODE: $0000055B VOL: 0
; 0000 049F     MAX7456_Write(1, timer_pointer, OSDchr['0'+(hour%10)]);     // 1hour
;PCODE: $0000055C VOL: 0
;PCODE: $0000055D VOL: 0
;PCODE: $0000055E VOL: 0
;PCODE: $0000055F VOL: 0
;PCODE: $00000560 VOL: 0
;PCODE: $00000561 VOL: 0
;PCODE: $00000562 VOL: 0
;PCODE: $00000563 VOL: 0
;PCODE: $00000564 VOL: 0
;PCODE: $00000565 VOL: 0
;PCODE: $00000566 VOL: 0
;PCODE: $00000567 VOL: 0
;PCODE: $00000568 VOL: 0
;PCODE: $00000569 VOL: 0
;PCODE: $0000056A VOL: 0
; 0000 04A0     timer_pointer--;
;PCODE: $0000056B VOL: 0
;PCODE: $0000056C VOL: 0
;PCODE: $0000056D VOL: 0
; 0000 04A1     MAX7456_Write(1, timer_pointer, OSDchr['0'+(hour/10)]);     // 10hour
;PCODE: $0000056E VOL: 0
;PCODE: $0000056F VOL: 0
;PCODE: $00000570 VOL: 0
;PCODE: $00000571 VOL: 0
;PCODE: $00000572 VOL: 0
;PCODE: $00000573 VOL: 0
;PCODE: $00000574 VOL: 0
;PCODE: $00000575 VOL: 0
;PCODE: $00000576 VOL: 0
;PCODE: $00000577 VOL: 0
;PCODE: $00000578 VOL: 0
;PCODE: $00000579 VOL: 0
;PCODE: $0000057A VOL: 0
;PCODE: $0000057B VOL: 0
;PCODE: $0000057C VOL: 0
; 0000 04A2 }
;PCODE: $0000057D VOL: 0
;PCODE: $0000057E VOL: 0
;PCODE: $0000057F VOL: 0
;int minu=0;
;void ontime_min(void)
; 0000 04A5 {
;PCODE: $00000580 VOL: 0
;PCODE: $00000581 VOL: 0
; 0000 04A6     //min=s%3600;
; 0000 04A7     int a=RTC_sec%3600;
; 0000 04A8     if(minu>=59 || a==0)
;PCODE: $00000582 VOL: 0
;PCODE: $00000583 VOL: 0
;	a -> R16,R17
;PCODE: $00000584 VOL: 0
;PCODE: $00000585 VOL: 0
;PCODE: $00000586 VOL: 0
;PCODE: $00000587 VOL: 0
;PCODE: $00000588 VOL: 0
;PCODE: $00000589 VOL: 0
;PCODE: $0000058A VOL: 0
;PCODE: $0000058B VOL: 0
;PCODE: $0000058C VOL: 0
;PCODE: $0000058D VOL: 0
;PCODE: $0000058E VOL: 0
; 0000 04A9     {
; 0000 04AA         minu=0;
;PCODE: $0000058F VOL: 0
;PCODE: $00000590 VOL: 0
; 0000 04AB         ontime_hour();
;PCODE: $00000591 VOL: 0
; 0000 04AC     }
; 0000 04AD     else minu++;
;PCODE: $00000592 VOL: 0
;PCODE: $00000593 VOL: 0
;PCODE: $00000594 VOL: 0
;PCODE: $00000595 VOL: 0
;PCODE: $00000596 VOL: 0
; 0000 04AE     timer_pointer+=5;
;PCODE: $00000597 VOL: 0
;PCODE: $00000598 VOL: 0
;PCODE: $00000599 VOL: 0
;PCODE: $0000059A VOL: 0
; 0000 04AF     MAX7456_Write(1, timer_pointer, OSDchr[':']);                // :
;PCODE: $0000059B VOL: 0
;PCODE: $0000059C VOL: 0
;PCODE: $0000059D VOL: 0
;PCODE: $0000059E VOL: 0
;PCODE: $0000059F VOL: 0
;PCODE: $000005A0 VOL: 0
;PCODE: $000005A1 VOL: 0
;PCODE: $000005A2 VOL: 0
;PCODE: $000005A3 VOL: 0
;PCODE: $000005A4 VOL: 0
; 0000 04B0     timer_pointer--;
;PCODE: $000005A5 VOL: 0
;PCODE: $000005A6 VOL: 0
;PCODE: $000005A7 VOL: 0
; 0000 04B1     MAX7456_Write(1, timer_pointer, OSDchr['0'+(minu%10)]);      // 1min
;PCODE: $000005A8 VOL: 0
;PCODE: $000005A9 VOL: 0
;PCODE: $000005AA VOL: 0
;PCODE: $000005AB VOL: 0
;PCODE: $000005AC VOL: 0
;PCODE: $000005AD VOL: 0
;PCODE: $000005AE VOL: 0
;PCODE: $000005AF VOL: 0
;PCODE: $000005B0 VOL: 0
;PCODE: $000005B1 VOL: 0
;PCODE: $000005B2 VOL: 0
;PCODE: $000005B3 VOL: 0
;PCODE: $000005B4 VOL: 0
;PCODE: $000005B5 VOL: 0
; 0000 04B2     timer_pointer--;
;PCODE: $000005B6 VOL: 0
;PCODE: $000005B7 VOL: 0
;PCODE: $000005B8 VOL: 0
; 0000 04B3     MAX7456_Write(1, timer_pointer, OSDchr['0'+(minu/10)]);      // 10min
;PCODE: $000005B9 VOL: 0
;PCODE: $000005BA VOL: 0
;PCODE: $000005BB VOL: 0
;PCODE: $000005BC VOL: 0
;PCODE: $000005BD VOL: 0
;PCODE: $000005BE VOL: 0
;PCODE: $000005BF VOL: 0
;PCODE: $000005C0 VOL: 0
;PCODE: $000005C1 VOL: 0
;PCODE: $000005C2 VOL: 0
;PCODE: $000005C3 VOL: 0
;PCODE: $000005C4 VOL: 0
;PCODE: $000005C5 VOL: 0
;PCODE: $000005C6 VOL: 0
; 0000 04B4     timer_pointer-=3;
;PCODE: $000005C7 VOL: 0
;PCODE: $000005C8 VOL: 0
;PCODE: $000005C9 VOL: 0
;PCODE: $000005CA VOL: 0
; 0000 04B5 }
;PCODE: $000005CB VOL: 0
;PCODE: $000005CC VOL: 0
;PCODE: $000005CD VOL: 0
;void ontime_sec(void)
; 0000 04B7 {
;PCODE: $000005CE VOL: 0
;PCODE: $000005CF VOL: 0
; 0000 04B8     unsigned long int a;
; 0000 04B9     RTC_flag=0;
;PCODE: $000005D0 VOL: 0
;	a -> Y+0
;PCODE: $000005D1 VOL: 0
;PCODE: $000005D2 VOL: 0
; 0000 04BA     if(hour>=24) RTC_sec=0;
;PCODE: $000005D3 VOL: 0
;PCODE: $000005D4 VOL: 0
;PCODE: $000005D5 VOL: 0
;PCODE: $000005D6 VOL: 0
;PCODE: $000005D7 VOL: 0
; 0000 04BB     else{
;PCODE: $000005D8 VOL: 0
;PCODE: $000005D9 VOL: 0
; 0000 04BC     a=RTC_sec%60;
;PCODE: $000005DA VOL: 0
;PCODE: $000005DB VOL: 0
;PCODE: $000005DC VOL: 0
;PCODE: $000005DD VOL: 0
; 0000 04BD     timer_pointer+=7;
;PCODE: $000005DE VOL: 0
;PCODE: $000005DF VOL: 0
;PCODE: $000005E0 VOL: 0
; 0000 04BE     MAX7456_Write(1, timer_pointer, OSDchr['0'+(a%10)]);    // 1sec
;PCODE: $000005E1 VOL: 0
;PCODE: $000005E2 VOL: 0
;PCODE: $000005E3 VOL: 0
;PCODE: $000005E4 VOL: 0
;PCODE: $000005E5 VOL: 0
;PCODE: $000005E6 VOL: 0
;PCODE: $000005E7 VOL: 0
;PCODE: $000005E8 VOL: 0
;PCODE: $000005E9 VOL: 0
;PCODE: $000005EA VOL: 0
;PCODE: $000005EB VOL: 0
;PCODE: $000005EC VOL: 0
;PCODE: $000005ED VOL: 0
;PCODE: $000005EE VOL: 0
; 0000 04BF     timer_pointer--;
;PCODE: $000005EF VOL: 0
;PCODE: $000005F0 VOL: 0
;PCODE: $000005F1 VOL: 0
; 0000 04C0     MAX7456_Write(1, timer_pointer, OSDchr['0'+(a/10)]);    // 10sec
;PCODE: $000005F2 VOL: 0
;PCODE: $000005F3 VOL: 0
;PCODE: $000005F4 VOL: 0
;PCODE: $000005F5 VOL: 0
;PCODE: $000005F6 VOL: 0
;PCODE: $000005F7 VOL: 0
;PCODE: $000005F8 VOL: 0
;PCODE: $000005F9 VOL: 0
;PCODE: $000005FA VOL: 0
;PCODE: $000005FB VOL: 0
;PCODE: $000005FC VOL: 0
;PCODE: $000005FD VOL: 0
;PCODE: $000005FE VOL: 0
;PCODE: $000005FF VOL: 0
; 0000 04C1     timer_pointer-=6;
;PCODE: $00000600 VOL: 0
;PCODE: $00000601 VOL: 0
;PCODE: $00000602 VOL: 0
;PCODE: $00000603 VOL: 0
; 0000 04C2     if(a==0) ontime_min();
;PCODE: $00000604 VOL: 0
;PCODE: $00000605 VOL: 0
;PCODE: $00000606 VOL: 0
;PCODE: $00000607 VOL: 0
; 0000 04C3     }
;PCODE: $00000608 VOL: 0
;PCODE: $00000609 VOL: 0
; 0000 04C4 }
;PCODE: $0000060A VOL: 0
;PCODE: $0000060B VOL: 0
;PCODE: $0000060C VOL: 0
;/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
;bit ontime_flag=0;
;int date_pointer;
;void commands(void) //¸í·É¾î Å°Á¶ÇÕ
; 0000 04C9 {
;PCODE: $0000060D VOL: 0
;PCODE: $0000060E VOL: 0
; 0000 04CA     if(command[1]=='A' && command[2]=='T' && command[3]==13)          // ¿¬°áÈ®ÀÎ
;PCODE: $0000060F VOL: 0
;PCODE: $00000610 VOL: 0
;PCODE: $00000611 VOL: 0
;PCODE: $00000612 VOL: 0
;PCODE: $00000613 VOL: 0
;PCODE: $00000614 VOL: 0
;PCODE: $00000615 VOL: 0
;PCODE: $00000616 VOL: 0
;PCODE: $00000617 VOL: 0
;PCODE: $00000618 VOL: 0
;PCODE: $00000619 VOL: 0
;PCODE: $0000061A VOL: 0
;PCODE: $0000061B VOL: 0
;PCODE: $0000061C VOL: 0
;PCODE: $0000061D VOL: 0
;PCODE: $0000061E VOL: 0
; 0000 04CB     {
; 0000 04CC         delay_us(100);
;PCODE: $0000061F VOL: 0
; 0000 04CD         puts("OSD CONNECT : OK\r");
;PCODE: $00000620 VOL: 0
;PCODE: $00000621 VOL: 0
;PCODE: $00000622 VOL: 0
;PCODE: $00000623 VOL: 0
; 0000 04CE         com_reset();
;PCODE: $00000624 VOL: 0
; 0000 04CF     }
; 0000 04D0     else if(command[1]=='C' && command[2]=='K' && command[3]==13) // CHECK¿ë
;PCODE: $00000625 VOL: 0
;PCODE: $00000626 VOL: 0
;PCODE: $00000627 VOL: 0
;PCODE: $00000628 VOL: 0
;PCODE: $00000629 VOL: 0
;PCODE: $0000062A VOL: 0
;PCODE: $0000062B VOL: 0
;PCODE: $0000062C VOL: 0
;PCODE: $0000062D VOL: 0
;PCODE: $0000062E VOL: 0
;PCODE: $0000062F VOL: 0
;PCODE: $00000630 VOL: 0
;PCODE: $00000631 VOL: 0
;PCODE: $00000632 VOL: 0
;PCODE: $00000633 VOL: 0
;PCODE: $00000634 VOL: 0
;PCODE: $00000635 VOL: 0
;PCODE: $00000636 VOL: 0
; 0000 04D1     {
; 0000 04D2         check();
;PCODE: $00000637 VOL: 0
; 0000 04D3         com_reset();
;PCODE: $00000638 VOL: 0
; 0000 04D4     }
; 0000 04D5     else if(command[1]=='C' && command[2]=='R' && command[3]==13) // È­¸é CLEAR
;PCODE: $00000639 VOL: 0
;PCODE: $0000063A VOL: 0
;PCODE: $0000063B VOL: 0
;PCODE: $0000063C VOL: 0
;PCODE: $0000063D VOL: 0
;PCODE: $0000063E VOL: 0
;PCODE: $0000063F VOL: 0
;PCODE: $00000640 VOL: 0
;PCODE: $00000641 VOL: 0
;PCODE: $00000642 VOL: 0
;PCODE: $00000643 VOL: 0
;PCODE: $00000644 VOL: 0
;PCODE: $00000645 VOL: 0
;PCODE: $00000646 VOL: 0
;PCODE: $00000647 VOL: 0
;PCODE: $00000648 VOL: 0
;PCODE: $00000649 VOL: 0
;PCODE: $0000064A VOL: 0
; 0000 04D6     {
; 0000 04D7         clear();
;PCODE: $0000064B VOL: 0
; 0000 04D8         com_reset();
;PCODE: $0000064C VOL: 0
; 0000 04D9     }
; 0000 04DA     else if(command[1]=='O' && command[2]=='N' && command[3]==13)     // OSD ON
;PCODE: $0000064D VOL: 0
;PCODE: $0000064E VOL: 0
;PCODE: $0000064F VOL: 0
;PCODE: $00000650 VOL: 0
;PCODE: $00000651 VOL: 0
;PCODE: $00000652 VOL: 0
;PCODE: $00000653 VOL: 0
;PCODE: $00000654 VOL: 0
;PCODE: $00000655 VOL: 0
;PCODE: $00000656 VOL: 0
;PCODE: $00000657 VOL: 0
;PCODE: $00000658 VOL: 0
;PCODE: $00000659 VOL: 0
;PCODE: $0000065A VOL: 0
;PCODE: $0000065B VOL: 0
;PCODE: $0000065C VOL: 0
;PCODE: $0000065D VOL: 0
;PCODE: $0000065E VOL: 0
; 0000 04DB     {
; 0000 04DC         on();
;PCODE: $0000065F VOL: 0
; 0000 04DD         com_reset();
;PCODE: $00000660 VOL: 0
; 0000 04DE     }
; 0000 04DF    else if(command[1]=='O' && command[2]=='F' && command[3]==13)   // OSD OFF
;PCODE: $00000661 VOL: 0
;PCODE: $00000662 VOL: 0
;PCODE: $00000663 VOL: 0
;PCODE: $00000664 VOL: 0
;PCODE: $00000665 VOL: 0
;PCODE: $00000666 VOL: 0
;PCODE: $00000667 VOL: 0
;PCODE: $00000668 VOL: 0
;PCODE: $00000669 VOL: 0
;PCODE: $0000066A VOL: 0
;PCODE: $0000066B VOL: 0
;PCODE: $0000066C VOL: 0
;PCODE: $0000066D VOL: 0
;PCODE: $0000066E VOL: 0
;PCODE: $0000066F VOL: 0
;PCODE: $00000670 VOL: 0
;PCODE: $00000671 VOL: 0
;PCODE: $00000672 VOL: 0
; 0000 04E0     {
; 0000 04E1         off();
;PCODE: $00000673 VOL: 0
; 0000 04E2         com_reset();
;PCODE: $00000674 VOL: 0
; 0000 04E3     }
; 0000 04E4     else if(command[1]=='C' && command[2]=='L' && command[3]!= NULL && command[4]!= NULL && command[5] == 13)  //¿­
;PCODE: $00000675 VOL: 0
;PCODE: $00000676 VOL: 0
;PCODE: $00000677 VOL: 0
;PCODE: $00000678 VOL: 0
;PCODE: $00000679 VOL: 0
;PCODE: $0000067A VOL: 0
;PCODE: $0000067B VOL: 0
;PCODE: $0000067C VOL: 0
;PCODE: $0000067D VOL: 0
;PCODE: $0000067E VOL: 0
;PCODE: $0000067F VOL: 0
;PCODE: $00000680 VOL: 0
;PCODE: $00000681 VOL: 0
;PCODE: $00000682 VOL: 0
;PCODE: $00000683 VOL: 0
;PCODE: $00000684 VOL: 0
;PCODE: $00000685 VOL: 0
;PCODE: $00000686 VOL: 0
;PCODE: $00000687 VOL: 0
;PCODE: $00000688 VOL: 0
;PCODE: $00000689 VOL: 0
;PCODE: $0000068A VOL: 0
;PCODE: $0000068B VOL: 0
;PCODE: $0000068C VOL: 0
;PCODE: $0000068D VOL: 0
;PCODE: $0000068E VOL: 0
; 0000 04E5     {
; 0000 04E6         col(command[3]);
;PCODE: $0000068F VOL: 0
;PCODE: $00000690 VOL: 0
;PCODE: $00000691 VOL: 0
;PCODE: $00000692 VOL: 0
; 0000 04E7         com_reset();
;PCODE: $00000693 VOL: 0
; 0000 04E8     }
; 0000 04E9     else if(command[1]=='R' && command[2]=='W'  && command[3]!= NULL && command[4] != NULL && command[5]==13) // Çà
;PCODE: $00000694 VOL: 0
;PCODE: $00000695 VOL: 0
;PCODE: $00000696 VOL: 0
;PCODE: $00000697 VOL: 0
;PCODE: $00000698 VOL: 0
;PCODE: $00000699 VOL: 0
;PCODE: $0000069A VOL: 0
;PCODE: $0000069B VOL: 0
;PCODE: $0000069C VOL: 0
;PCODE: $0000069D VOL: 0
;PCODE: $0000069E VOL: 0
;PCODE: $0000069F VOL: 0
;PCODE: $000006A0 VOL: 0
;PCODE: $000006A1 VOL: 0
;PCODE: $000006A2 VOL: 0
;PCODE: $000006A3 VOL: 0
;PCODE: $000006A4 VOL: 0
;PCODE: $000006A5 VOL: 0
;PCODE: $000006A6 VOL: 0
;PCODE: $000006A7 VOL: 0
;PCODE: $000006A8 VOL: 0
;PCODE: $000006A9 VOL: 0
;PCODE: $000006AA VOL: 0
;PCODE: $000006AB VOL: 0
;PCODE: $000006AC VOL: 0
;PCODE: $000006AD VOL: 0
; 0000 04EA     {
; 0000 04EB         row(command[3]);
;PCODE: $000006AE VOL: 0
;PCODE: $000006AF VOL: 0
;PCODE: $000006B0 VOL: 0
;PCODE: $000006B1 VOL: 0
; 0000 04EC         com_reset();
;PCODE: $000006B2 VOL: 0
; 0000 04ED     }
; 0000 04EE     else if(command[1]=='T' && command[2]=='R' && command[3]==13)
;PCODE: $000006B3 VOL: 0
;PCODE: $000006B4 VOL: 0
;PCODE: $000006B5 VOL: 0
;PCODE: $000006B6 VOL: 0
;PCODE: $000006B7 VOL: 0
;PCODE: $000006B8 VOL: 0
;PCODE: $000006B9 VOL: 0
;PCODE: $000006BA VOL: 0
;PCODE: $000006BB VOL: 0
;PCODE: $000006BC VOL: 0
;PCODE: $000006BD VOL: 0
;PCODE: $000006BE VOL: 0
;PCODE: $000006BF VOL: 0
;PCODE: $000006C0 VOL: 0
;PCODE: $000006C1 VOL: 0
;PCODE: $000006C2 VOL: 0
;PCODE: $000006C3 VOL: 0
;PCODE: $000006C4 VOL: 0
; 0000 04EF     {
; 0000 04F0         ontime_flag = ~ontime_flag;
;PCODE: $000006C5 VOL: 0
;PCODE: $000006C6 VOL: 0
;PCODE: $000006C7 VOL: 0
;PCODE: $000006C8 VOL: 0
;PCODE: $000006C9 VOL: 0
;PCODE: $000006CA VOL: 0
;PCODE: $000006CB VOL: 0
;PCODE: $000006CC VOL: 0
;PCODE: $000006CD VOL: 0
;PCODE: $000006CE VOL: 0
; 0000 04F1         if(ontime_flag==1)
;PCODE: $000006CF VOL: 0
;PCODE: $000006D0 VOL: 0
;PCODE: $000006D1 VOL: 0
; 0000 04F2         {
; 0000 04F3             //t_pointer=pointer;
; 0000 04F4             timer_pointer=19;
;PCODE: $000006D2 VOL: 0
;PCODE: $000006D3 VOL: 0
; 0000 04F5             puts("ONTIMER ON\r");
;PCODE: $000006D4 VOL: 0
;PCODE: $000006D5 VOL: 0
;PCODE: $000006D6 VOL: 0
;PCODE: $000006D7 VOL: 0
; 0000 04F6         }
; 0000 04F7         else puts("ONTIMER OFF\r");
;PCODE: $000006D8 VOL: 0
;PCODE: $000006D9 VOL: 0
;PCODE: $000006DA VOL: 0
;PCODE: $000006DB VOL: 0
;PCODE: $000006DC VOL: 0
;PCODE: $000006DD VOL: 0
; 0000 04F8         com_reset();
;PCODE: $000006DE VOL: 0
;PCODE: $000006DF VOL: 0
; 0000 04F9     }
; 0000 04FA     else if(command[1]=='T' && command[2]=='S' && command[3]!= NULL && command[4] != NULL && command[5]!= NULL && command[6] != NULL && command[7]==13)
;PCODE: $000006E0 VOL: 0
;PCODE: $000006E1 VOL: 0
;PCODE: $000006E2 VOL: 0
;PCODE: $000006E3 VOL: 0
;PCODE: $000006E4 VOL: 0
;PCODE: $000006E5 VOL: 0
;PCODE: $000006E6 VOL: 0
;PCODE: $000006E7 VOL: 0
;PCODE: $000006E8 VOL: 0
;PCODE: $000006E9 VOL: 0
;PCODE: $000006EA VOL: 0
;PCODE: $000006EB VOL: 0
;PCODE: $000006EC VOL: 0
;PCODE: $000006ED VOL: 0
;PCODE: $000006EE VOL: 0
;PCODE: $000006EF VOL: 0
;PCODE: $000006F0 VOL: 0
;PCODE: $000006F1 VOL: 0
;PCODE: $000006F2 VOL: 0
;PCODE: $000006F3 VOL: 0
;PCODE: $000006F4 VOL: 0
;PCODE: $000006F5 VOL: 0
;PCODE: $000006F6 VOL: 0
;PCODE: $000006F7 VOL: 0
;PCODE: $000006F8 VOL: 0
;PCODE: $000006F9 VOL: 0
;PCODE: $000006FA VOL: 0
;PCODE: $000006FB VOL: 0
;PCODE: $000006FC VOL: 0
;PCODE: $000006FD VOL: 0
;PCODE: $000006FE VOL: 0
;PCODE: $000006FF VOL: 0
;PCODE: $00000700 VOL: 0
;PCODE: $00000701 VOL: 0
; 0000 04FB     {
; 0000 04FC         timer_pointer=19;
;PCODE: $00000702 VOL: 0
;PCODE: $00000703 VOL: 0
; 0000 04FD         ontime_flag = 1;
;PCODE: $00000704 VOL: 0
;PCODE: $00000705 VOL: 0
; 0000 04FE         hour=(command[3]-'0')*10+(command[4]-'0'-1);
;PCODE: $00000706 VOL: 0
;PCODE: $00000707 VOL: 0
;PCODE: $00000708 VOL: 0
;PCODE: $00000709 VOL: 0
;PCODE: $0000070A VOL: 0
;PCODE: $0000070B VOL: 0
;PCODE: $0000070C VOL: 0
;PCODE: $0000070D VOL: 0
;PCODE: $0000070E VOL: 0
;PCODE: $0000070F VOL: 0
;PCODE: $00000710 VOL: 0
;PCODE: $00000711 VOL: 0
;PCODE: $00000712 VOL: 0
;PCODE: $00000713 VOL: 0
; 0000 04FF         minu=(command[5]-'0')*10+(command[6]-'0'-1);
;PCODE: $00000714 VOL: 0
;PCODE: $00000715 VOL: 0
;PCODE: $00000716 VOL: 0
;PCODE: $00000717 VOL: 0
;PCODE: $00000718 VOL: 0
;PCODE: $00000719 VOL: 0
;PCODE: $0000071A VOL: 0
;PCODE: $0000071B VOL: 0
;PCODE: $0000071C VOL: 0
;PCODE: $0000071D VOL: 0
;PCODE: $0000071E VOL: 0
;PCODE: $0000071F VOL: 0
;PCODE: $00000720 VOL: 0
;PCODE: $00000721 VOL: 0
; 0000 0500         ontime_min();
;PCODE: $00000722 VOL: 0
; 0000 0501         ontime_hour();
;PCODE: $00000723 VOL: 0
; 0000 0502         puts("ONTIMER SET\r");
;PCODE: $00000724 VOL: 0
;PCODE: $00000725 VOL: 0
;PCODE: $00000726 VOL: 0
;PCODE: $00000727 VOL: 0
; 0000 0503         com_reset();
;PCODE: $00000728 VOL: 0
; 0000 0504     }
; 0000 0505     else if(command[1]=='T' && command[2]=='H' && command[3]!= NULL && command[4] != NULL && command[5]==13)
;PCODE: $00000729 VOL: 0
;PCODE: $0000072A VOL: 0
;PCODE: $0000072B VOL: 0
;PCODE: $0000072C VOL: 0
;PCODE: $0000072D VOL: 0
;PCODE: $0000072E VOL: 0
;PCODE: $0000072F VOL: 0
;PCODE: $00000730 VOL: 0
;PCODE: $00000731 VOL: 0
;PCODE: $00000732 VOL: 0
;PCODE: $00000733 VOL: 0
;PCODE: $00000734 VOL: 0
;PCODE: $00000735 VOL: 0
;PCODE: $00000736 VOL: 0
;PCODE: $00000737 VOL: 0
;PCODE: $00000738 VOL: 0
;PCODE: $00000739 VOL: 0
;PCODE: $0000073A VOL: 0
;PCODE: $0000073B VOL: 0
;PCODE: $0000073C VOL: 0
;PCODE: $0000073D VOL: 0
;PCODE: $0000073E VOL: 0
;PCODE: $0000073F VOL: 0
;PCODE: $00000740 VOL: 0
;PCODE: $00000741 VOL: 0
;PCODE: $00000742 VOL: 0
; 0000 0506     {
; 0000 0507         hour=(command[3]-'0')*10+(command[4]-'0'-1);
;PCODE: $00000743 VOL: 0
;PCODE: $00000744 VOL: 0
;PCODE: $00000745 VOL: 0
;PCODE: $00000746 VOL: 0
;PCODE: $00000747 VOL: 0
;PCODE: $00000748 VOL: 0
;PCODE: $00000749 VOL: 0
;PCODE: $0000074A VOL: 0
;PCODE: $0000074B VOL: 0
;PCODE: $0000074C VOL: 0
;PCODE: $0000074D VOL: 0
;PCODE: $0000074E VOL: 0
;PCODE: $0000074F VOL: 0
;PCODE: $00000750 VOL: 0
; 0000 0508         ontime_hour();
;PCODE: $00000751 VOL: 0
; 0000 0509         com_reset();
;PCODE: $00000752 VOL: 0
; 0000 050A     }
; 0000 050B     else if(command[1]=='T' && command[2]=='M' && command[3]!= NULL && command[4] != NULL && command[5]==13)
;PCODE: $00000753 VOL: 0
;PCODE: $00000754 VOL: 0
;PCODE: $00000755 VOL: 0
;PCODE: $00000756 VOL: 0
;PCODE: $00000757 VOL: 0
;PCODE: $00000758 VOL: 0
;PCODE: $00000759 VOL: 0
;PCODE: $0000075A VOL: 0
;PCODE: $0000075B VOL: 0
;PCODE: $0000075C VOL: 0
;PCODE: $0000075D VOL: 0
;PCODE: $0000075E VOL: 0
;PCODE: $0000075F VOL: 0
;PCODE: $00000760 VOL: 0
;PCODE: $00000761 VOL: 0
;PCODE: $00000762 VOL: 0
;PCODE: $00000763 VOL: 0
;PCODE: $00000764 VOL: 0
;PCODE: $00000765 VOL: 0
;PCODE: $00000766 VOL: 0
;PCODE: $00000767 VOL: 0
;PCODE: $00000768 VOL: 0
;PCODE: $00000769 VOL: 0
;PCODE: $0000076A VOL: 0
;PCODE: $0000076B VOL: 0
;PCODE: $0000076C VOL: 0
; 0000 050C     {
; 0000 050D         minu=(command[3]-'0')*10+(command[4]-'0'-1);
;PCODE: $0000076D VOL: 0
;PCODE: $0000076E VOL: 0
;PCODE: $0000076F VOL: 0
;PCODE: $00000770 VOL: 0
;PCODE: $00000771 VOL: 0
;PCODE: $00000772 VOL: 0
;PCODE: $00000773 VOL: 0
;PCODE: $00000774 VOL: 0
;PCODE: $00000775 VOL: 0
;PCODE: $00000776 VOL: 0
;PCODE: $00000777 VOL: 0
;PCODE: $00000778 VOL: 0
;PCODE: $00000779 VOL: 0
;PCODE: $0000077A VOL: 0
; 0000 050E         ontime_min();
;PCODE: $0000077B VOL: 0
; 0000 050F         com_reset();
;PCODE: $0000077C VOL: 0
; 0000 0510     }
; 0000 0511     else if(command[1]=='D' && command[2]=='T'&& command[3] != NULL && command[4]!= NULL && command[5] != NULL && command[6]!= NULL && command[7] != NULL && command[8]!= NULL && command[9] == 13   )
;PCODE: $0000077D VOL: 0
;PCODE: $0000077E VOL: 0
;PCODE: $0000077F VOL: 0
;PCODE: $00000780 VOL: 0
;PCODE: $00000781 VOL: 0
;PCODE: $00000782 VOL: 0
;PCODE: $00000783 VOL: 0
;PCODE: $00000784 VOL: 0
;PCODE: $00000785 VOL: 0
;PCODE: $00000786 VOL: 0
;PCODE: $00000787 VOL: 0
;PCODE: $00000788 VOL: 0
;PCODE: $00000789 VOL: 0
;PCODE: $0000078A VOL: 0
;PCODE: $0000078B VOL: 0
;PCODE: $0000078C VOL: 0
;PCODE: $0000078D VOL: 0
;PCODE: $0000078E VOL: 0
;PCODE: $0000078F VOL: 0
;PCODE: $00000790 VOL: 0
;PCODE: $00000791 VOL: 0
;PCODE: $00000792 VOL: 0
;PCODE: $00000793 VOL: 0
;PCODE: $00000794 VOL: 0
;PCODE: $00000795 VOL: 0
;PCODE: $00000796 VOL: 0
;PCODE: $00000797 VOL: 0
;PCODE: $00000798 VOL: 0
;PCODE: $00000799 VOL: 0
;PCODE: $0000079A VOL: 0
;PCODE: $0000079B VOL: 0
;PCODE: $0000079C VOL: 0
;PCODE: $0000079D VOL: 0
;PCODE: $0000079E VOL: 0
;PCODE: $0000079F VOL: 0
;PCODE: $000007A0 VOL: 0
;PCODE: $000007A1 VOL: 0
;PCODE: $000007A2 VOL: 0
;PCODE: $000007A3 VOL: 0
;PCODE: $000007A4 VOL: 0
;PCODE: $000007A5 VOL: 0
;PCODE: $000007A6 VOL: 0
; 0000 0512     {
; 0000 0513         date_pointer=26;
;PCODE: $000007A7 VOL: 0
;PCODE: $000007A8 VOL: 0
; 0000 0514         MAX7456_Write(11, date_pointer, OSDchr[command[8]]);
;PCODE: $000007A9 VOL: 0
;PCODE: $000007AA VOL: 0
;PCODE: $000007AB VOL: 0
;PCODE: $000007AC VOL: 0
;PCODE: $000007AD VOL: 0
;PCODE: $000007AE VOL: 0
;PCODE: $000007AF VOL: 0
;PCODE: $000007B0 VOL: 0
;PCODE: $000007B1 VOL: 0
;PCODE: $000007B2 VOL: 0
;PCODE: $000007B3 VOL: 0
;PCODE: $000007B4 VOL: 0
; 0000 0515         date_pointer--;
;PCODE: $000007B5 VOL: 0
;PCODE: $000007B6 VOL: 0
;PCODE: $000007B7 VOL: 0
; 0000 0516         MAX7456_Write(11, date_pointer, OSDchr[command[7]]);
;PCODE: $000007B8 VOL: 0
;PCODE: $000007B9 VOL: 0
;PCODE: $000007BA VOL: 0
;PCODE: $000007BB VOL: 0
;PCODE: $000007BC VOL: 0
;PCODE: $000007BD VOL: 0
;PCODE: $000007BE VOL: 0
;PCODE: $000007BF VOL: 0
;PCODE: $000007C0 VOL: 0
;PCODE: $000007C1 VOL: 0
;PCODE: $000007C2 VOL: 0
;PCODE: $000007C3 VOL: 0
; 0000 0517         date_pointer--;
;PCODE: $000007C4 VOL: 0
;PCODE: $000007C5 VOL: 0
;PCODE: $000007C6 VOL: 0
; 0000 0518         MAX7456_Write(11, date_pointer, OSDchr['/']);
;PCODE: $000007C7 VOL: 0
;PCODE: $000007C8 VOL: 0
;PCODE: $000007C9 VOL: 0
;PCODE: $000007CA VOL: 0
;PCODE: $000007CB VOL: 0
;PCODE: $000007CC VOL: 0
;PCODE: $000007CD VOL: 0
;PCODE: $000007CE VOL: 0
;PCODE: $000007CF VOL: 0
; 0000 0519         date_pointer--;
;PCODE: $000007D0 VOL: 0
;PCODE: $000007D1 VOL: 0
;PCODE: $000007D2 VOL: 0
; 0000 051A         MAX7456_Write(11, date_pointer, OSDchr[command[6]]);
;PCODE: $000007D3 VOL: 0
;PCODE: $000007D4 VOL: 0
;PCODE: $000007D5 VOL: 0
;PCODE: $000007D6 VOL: 0
;PCODE: $000007D7 VOL: 0
;PCODE: $000007D8 VOL: 0
;PCODE: $000007D9 VOL: 0
;PCODE: $000007DA VOL: 0
;PCODE: $000007DB VOL: 0
;PCODE: $000007DC VOL: 0
;PCODE: $000007DD VOL: 0
;PCODE: $000007DE VOL: 0
; 0000 051B         date_pointer--;
;PCODE: $000007DF VOL: 0
;PCODE: $000007E0 VOL: 0
;PCODE: $000007E1 VOL: 0
; 0000 051C         MAX7456_Write(11, date_pointer, OSDchr[command[5]]);
;PCODE: $000007E2 VOL: 0
;PCODE: $000007E3 VOL: 0
;PCODE: $000007E4 VOL: 0
;PCODE: $000007E5 VOL: 0
;PCODE: $000007E6 VOL: 0
;PCODE: $000007E7 VOL: 0
;PCODE: $000007E8 VOL: 0
;PCODE: $000007E9 VOL: 0
;PCODE: $000007EA VOL: 0
;PCODE: $000007EB VOL: 0
;PCODE: $000007EC VOL: 0
;PCODE: $000007ED VOL: 0
; 0000 051D         date_pointer--;
;PCODE: $000007EE VOL: 0
;PCODE: $000007EF VOL: 0
;PCODE: $000007F0 VOL: 0
; 0000 051E         MAX7456_Write(11, date_pointer, OSDchr['/']);
;PCODE: $000007F1 VOL: 0
;PCODE: $000007F2 VOL: 0
;PCODE: $000007F3 VOL: 0
;PCODE: $000007F4 VOL: 0
;PCODE: $000007F5 VOL: 0
;PCODE: $000007F6 VOL: 0
;PCODE: $000007F7 VOL: 0
;PCODE: $000007F8 VOL: 0
;PCODE: $000007F9 VOL: 0
; 0000 051F         date_pointer--;
;PCODE: $000007FA VOL: 0
;PCODE: $000007FB VOL: 0
;PCODE: $000007FC VOL: 0
; 0000 0520         MAX7456_Write(11, date_pointer, OSDchr[command[4]]);
;PCODE: $000007FD VOL: 0
;PCODE: $000007FE VOL: 0
;PCODE: $000007FF VOL: 0
;PCODE: $00000800 VOL: 0
;PCODE: $00000801 VOL: 0
;PCODE: $00000802 VOL: 0
;PCODE: $00000803 VOL: 0
;PCODE: $00000804 VOL: 0
;PCODE: $00000805 VOL: 0
;PCODE: $00000806 VOL: 0
;PCODE: $00000807 VOL: 0
;PCODE: $00000808 VOL: 0
; 0000 0521         date_pointer--;
;PCODE: $00000809 VOL: 0
;PCODE: $0000080A VOL: 0
;PCODE: $0000080B VOL: 0
; 0000 0522         MAX7456_Write(11, date_pointer, OSDchr[command[3]]);
;PCODE: $0000080C VOL: 0
;PCODE: $0000080D VOL: 0
;PCODE: $0000080E VOL: 0
;PCODE: $0000080F VOL: 0
;PCODE: $00000810 VOL: 0
;PCODE: $00000811 VOL: 0
;PCODE: $00000812 VOL: 0
;PCODE: $00000813 VOL: 0
;PCODE: $00000814 VOL: 0
;PCODE: $00000815 VOL: 0
;PCODE: $00000816 VOL: 0
;PCODE: $00000817 VOL: 0
; 0000 0523         puts("DATE SET\r");
;PCODE: $00000818 VOL: 0
;PCODE: $00000819 VOL: 0
;PCODE: $0000081A VOL: 0
;PCODE: $0000081B VOL: 0
; 0000 0524         com_reset();
;PCODE: $0000081C VOL: 0
; 0000 0525     }
; 0000 0526     else if(command[1]=='T' && command[2]==':' && command[3]!=NULL)
;PCODE: $0000081D VOL: 0
;PCODE: $0000081E VOL: 0
;PCODE: $0000081F VOL: 0
;PCODE: $00000820 VOL: 0
;PCODE: $00000821 VOL: 0
;PCODE: $00000822 VOL: 0
;PCODE: $00000823 VOL: 0
;PCODE: $00000824 VOL: 0
;PCODE: $00000825 VOL: 0
;PCODE: $00000826 VOL: 0
;PCODE: $00000827 VOL: 0
;PCODE: $00000828 VOL: 0
;PCODE: $00000829 VOL: 0
;PCODE: $0000082A VOL: 0
;PCODE: $0000082B VOL: 0
;PCODE: $0000082C VOL: 0
;PCODE: $0000082D VOL: 0
;PCODE: $0000082E VOL: 0
; 0000 0527     {
; 0000 0528         title_pointer=2;
;PCODE: $0000082F VOL: 0
;PCODE: $00000830 VOL: 0
; 0000 0529         title();
;PCODE: $00000831 VOL: 0
; 0000 052A     }
; 0000 052B     else if(command[1]=='T' && command[2]=='E' && command[3]==13)
;PCODE: $00000832 VOL: 0
;PCODE: $00000833 VOL: 0
;PCODE: $00000834 VOL: 0
;PCODE: $00000835 VOL: 0
;PCODE: $00000836 VOL: 0
;PCODE: $00000837 VOL: 0
;PCODE: $00000838 VOL: 0
;PCODE: $00000839 VOL: 0
;PCODE: $0000083A VOL: 0
;PCODE: $0000083B VOL: 0
;PCODE: $0000083C VOL: 0
;PCODE: $0000083D VOL: 0
;PCODE: $0000083E VOL: 0
;PCODE: $0000083F VOL: 0
;PCODE: $00000840 VOL: 0
;PCODE: $00000841 VOL: 0
;PCODE: $00000842 VOL: 0
;PCODE: $00000843 VOL: 0
; 0000 052C     {
; 0000 052D         RTC_sec=0;
;PCODE: $00000844 VOL: 0
;PCODE: $00000845 VOL: 0
; 0000 052E         puts("SECOND : 0");
;PCODE: $00000846 VOL: 0
;PCODE: $00000847 VOL: 0
;PCODE: $00000848 VOL: 0
;PCODE: $00000849 VOL: 0
; 0000 052F         com_reset();
;PCODE: $0000084A VOL: 0
; 0000 0530     }
; 0000 0531     else if(command[1]=='E' && command[2]=='N' && command[3]==13)
;PCODE: $0000084B VOL: 0
;PCODE: $0000084C VOL: 0
;PCODE: $0000084D VOL: 0
;PCODE: $0000084E VOL: 0
;PCODE: $0000084F VOL: 0
;PCODE: $00000850 VOL: 0
;PCODE: $00000851 VOL: 0
;PCODE: $00000852 VOL: 0
;PCODE: $00000853 VOL: 0
;PCODE: $00000854 VOL: 0
;PCODE: $00000855 VOL: 0
;PCODE: $00000856 VOL: 0
;PCODE: $00000857 VOL: 0
;PCODE: $00000858 VOL: 0
;PCODE: $00000859 VOL: 0
;PCODE: $0000085A VOL: 0
;PCODE: $0000085B VOL: 0
;PCODE: $0000085C VOL: 0
; 0000 0532     {
; 0000 0533         flag_com=~flag_com;
;PCODE: $0000085D VOL: 0
;PCODE: $0000085E VOL: 0
;PCODE: $0000085F VOL: 0
;PCODE: $00000860 VOL: 0
;PCODE: $00000861 VOL: 0
;PCODE: $00000862 VOL: 0
;PCODE: $00000863 VOL: 0
;PCODE: $00000864 VOL: 0
;PCODE: $00000865 VOL: 0
;PCODE: $00000866 VOL: 0
; 0000 0534         if(flag_com==1)
;PCODE: $00000867 VOL: 0
;PCODE: $00000868 VOL: 0
;PCODE: $00000869 VOL: 0
; 0000 0535         {
; 0000 0536             //e_pointer=pointer;
; 0000 0537             encorder_pointer=2;
;PCODE: $0000086A VOL: 0
;PCODE: $0000086B VOL: 0
; 0000 0538             puts("ENCODER ON\r");
;PCODE: $0000086C VOL: 0
;PCODE: $0000086D VOL: 0
;PCODE: $0000086E VOL: 0
;PCODE: $0000086F VOL: 0
; 0000 0539         }
; 0000 053A         else puts("ENCODER OFF\r");
;PCODE: $00000870 VOL: 0
;PCODE: $00000871 VOL: 0
;PCODE: $00000872 VOL: 0
;PCODE: $00000873 VOL: 0
;PCODE: $00000874 VOL: 0
;PCODE: $00000875 VOL: 0
; 0000 053B         com_reset();
;PCODE: $00000876 VOL: 0
;PCODE: $00000877 VOL: 0
; 0000 053C     }
; 0000 053D     else if(command[1]=='E' && command[2]=='R'&& command[3]==13)
;PCODE: $00000878 VOL: 0
;PCODE: $00000879 VOL: 0
;PCODE: $0000087A VOL: 0
;PCODE: $0000087B VOL: 0
;PCODE: $0000087C VOL: 0
;PCODE: $0000087D VOL: 0
;PCODE: $0000087E VOL: 0
;PCODE: $0000087F VOL: 0
;PCODE: $00000880 VOL: 0
;PCODE: $00000881 VOL: 0
;PCODE: $00000882 VOL: 0
;PCODE: $00000883 VOL: 0
;PCODE: $00000884 VOL: 0
;PCODE: $00000885 VOL: 0
;PCODE: $00000886 VOL: 0
;PCODE: $00000887 VOL: 0
;PCODE: $00000888 VOL: 0
;PCODE: $00000889 VOL: 0
; 0000 053E     {
; 0000 053F         //init_LS7366();
; 0000 0540         reset_LS7366();
;PCODE: $0000088A VOL: 0
; 0000 0541         puts("ENCODER VALUE RESET!!\r");
;PCODE: $0000088B VOL: 0
;PCODE: $0000088C VOL: 0
;PCODE: $0000088D VOL: 0
;PCODE: $0000088E VOL: 0
; 0000 0542         com_reset();
;PCODE: $0000088F VOL: 0
; 0000 0543     }
; 0000 0544     else if(command[1] != NULL) //&& command[2] != NULL)   //¹®ÀÚÀÔ·Â
;PCODE: $00000890 VOL: 0
;PCODE: $00000891 VOL: 0
;PCODE: $00000892 VOL: 0
;PCODE: $00000893 VOL: 0
;PCODE: $00000894 VOL: 0
;PCODE: $00000895 VOL: 0
; 0000 0545     {
; 0000 0546          chat();
;PCODE: $00000896 VOL: 0
; 0000 0547     }
; 0000 0548 }
;PCODE: $00000897 VOL: 0
;PCODE: $00000898 VOL: 0
;PCODE: $00000899 VOL: 0
;PCODE: $0000089A VOL: 0
;PCODE: $0000089B VOL: 0
;PCODE: $0000089C VOL: 0
;PCODE: $0000089D VOL: 0
;PCODE: $0000089E VOL: 0
;PCODE: $0000089F VOL: 0
;PCODE: $000008A0 VOL: 0
;PCODE: $000008A1 VOL: 0
;PCODE: $000008A2 VOL: 0
;PCODE: $000008A3 VOL: 0
;PCODE: $000008A4 VOL: 0
;PCODE: $000008A5 VOL: 0
;PCODE: $000008A6 VOL: 0
;PCODE: $000008A7 VOL: 0
;PCODE: $000008A8 VOL: 0
;PCODE: $000008A9 VOL: 0

	.DSEG
_0x6F:
	.BYTE 0x7D
;///////////////////////////////////////////////////////************************************************************************************************//////////////////
;void main(void)
; 0000 054B {

	.CSEG
;PCODE: $000008AA VOL: 0
; 0000 054C // Declare your local variables here
; 0000 054D unsigned char n, i, ttemp=0;
; 0000 054E 
; 0000 054F // Interrupt system initialization
; 0000 0550 // Optimize for speed
; 0000 0551 #pragma optsize-
; 0000 0552 // Make sure the interrupts are disabled
; 0000 0553 #asm("cli")
;	n -> R17
;	i -> R16
;	ttemp -> R19
;PCODE: $000008AB VOL: 0
;PCODE: $000008AC VOL: 0
;PCODE: $000008AD VOL: 0
	cli
;PCODE: $000008AE VOL: 0
; 0000 0554 // Low level interrupt: On
; 0000 0555 // Round-robin scheduling for low level interrupt: Off
; 0000 0556 // Medium level interrupt: Off
; 0000 0557 // High level interrupt: Off
; 0000 0558 // The interrupt vectors will be placed at the start of the Application FLASH section
; 0000 0559 n=(PMIC.CTRL & (~(PMIC_RREN_bm | PMIC_IVSEL_bm | PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_LOLVLEN_bm))) |
; 0000 055A 	PMIC_LOLVLEN_bm;
;PCODE: $000008AF VOL: 1
;PCODE: $000008B0 VOL: 0
;PCODE: $000008B1 VOL: 0
;PCODE: $000008B2 VOL: 0
; 0000 055B CCP=CCP_IOREG_gc;
;PCODE: $000008B3 VOL: 0
;PCODE: $000008B4 VOL: 0
; 0000 055C PMIC.CTRL=n;
;PCODE: $000008B5 VOL: 1
;PCODE: $000008B6 VOL: 0
; 0000 055D // Set the default priority for round-robin scheduling
; 0000 055E PMIC.INTPRI=0x00;
;PCODE: $000008B7 VOL: 0
;PCODE: $000008B8 VOL: 1
; 0000 055F // Restore optimization for size if needed
; 0000 0560 #pragma optsize_default
; 0000 0561 
; 0000 0562 // Watchdog timer initialization
; 0000 0563 watchdog_init();
;PCODE: $000008B9 VOL: 0
; 0000 0564 
; 0000 0565 // System clocks initialization
; 0000 0566 system_clocks_init();
;PCODE: $000008BA VOL: 0
; 0000 0567 
; 0000 0568 // Event system initialization
; 0000 0569 event_system_init();
;PCODE: $000008BB VOL: 0
; 0000 056A 
; 0000 056B // Ports initialization
; 0000 056C ports_init();
;PCODE: $000008BC VOL: 0
; 0000 056D 
; 0000 056E // Virtual Ports initialization
; 0000 056F vports_init();
;PCODE: $000008BD VOL: 0
; 0000 0570 
; 0000 0571 // Timer/Counter TCC0 initialization
; 0000 0572 tcc0_init();
;PCODE: $000008BE VOL: 0
; 0000 0573 
; 0000 0574 // RTC initialization
; 0000 0575 rtcxm_init();
;PCODE: $000008BF VOL: 0
; 0000 0576 
; 0000 0577 // USARTD0 initialization
; 0000 0578 usartd0_init();
;PCODE: $000008C0 VOL: 0
; 0000 0579 
; 0000 057A // USARTD1 is disabled
; 0000 057B usart_disable(&USARTD1);
;PCODE: $000008C1 VOL: 1
;PCODE: $000008C2 VOL: 0
;PCODE: $000008C3 VOL: 0
; 0000 057C 
; 0000 057D // USARTE0 is disabled
; 0000 057E usart_disable(&USARTE0);
;PCODE: $000008C4 VOL: 1
;PCODE: $000008C5 VOL: 0
;PCODE: $000008C6 VOL: 0
; 0000 057F 
; 0000 0580 // SPIC initialization
; 0000 0581 spic_init();
;PCODE: $000008C7 VOL: 0
; 0000 0582 
; 0000 0583 // SPID initialization
; 0000 0584 spid_init();
;PCODE: $000008C8 VOL: 0
; 0000 0585 
; 0000 0586 // ENCORDER initialization
; 0000 0587 init_LS7366();
;PCODE: $000008C9 VOL: 0
; 0000 0588 
; 0000 0589 puts("OSD CONNECT : OK\r");
;PCODE: $000008CA VOL: 0
;PCODE: $000008CB VOL: 0
;PCODE: $000008CC VOL: 0
;PCODE: $000008CD VOL: 0
; 0000 058A MAX7456_init();
;PCODE: $000008CE VOL: 0
; 0000 058B // Globaly enable interrupts
; 0000 058C #asm("sei")
;PCODE: $000008CF VOL: 0
	sei
;PCODE: $000008D0 VOL: 0
; 0000 058D 
; 0000 058E while (1)
;PCODE: $000008D1 VOL: 0
; 0000 058F       {
; 0000 0590       // Place your code here
; 0000 0591         if(command_flag==1)
;PCODE: $000008D2 VOL: 0
;PCODE: $000008D3 VOL: 0
;PCODE: $000008D4 VOL: 0
; 0000 0592          {
; 0000 0593              if(command_size>1)commands();
;PCODE: $000008D5 VOL: 0
;PCODE: $000008D6 VOL: 0
;PCODE: $000008D7 VOL: 0
;PCODE: $000008D8 VOL: 0
; 0000 0594          }
;PCODE: $000008D9 VOL: 0
; 0000 0595         if(ontime_flag==1 && RTC_flag==1) ontime_sec();
;PCODE: $000008DA VOL: 0
;PCODE: $000008DB VOL: 0
;PCODE: $000008DC VOL: 0
;PCODE: $000008DD VOL: 0
;PCODE: $000008DE VOL: 0
;PCODE: $000008DF VOL: 0
;PCODE: $000008E0 VOL: 0
;PCODE: $000008E1 VOL: 0
;PCODE: $000008E2 VOL: 0
;PCODE: $000008E3 VOL: 0
;PCODE: $000008E4 VOL: 0
;PCODE: $000008E5 VOL: 0
; 0000 0596         if(flag_com==1 && (ten_ms%10)==0)
;PCODE: $000008E6 VOL: 0
;PCODE: $000008E7 VOL: 0
;PCODE: $000008E8 VOL: 0
;PCODE: $000008E9 VOL: 0
;PCODE: $000008EA VOL: 0
;PCODE: $000008EB VOL: 0
;PCODE: $000008EC VOL: 0
;PCODE: $000008ED VOL: 0
;PCODE: $000008EE VOL: 0
;PCODE: $000008EF VOL: 0
;PCODE: $000008F0 VOL: 0
;PCODE: $000008F1 VOL: 0
;PCODE: $000008F2 VOL: 0
; 0000 0597          {
; 0000 0598             LS7366_SS_H_L                     // Initialize SS
;PCODE: $000008F3 VOL: 0
;PCODE: $000008F4 VOL: 1
; 0000 0599             spid_master_tx_rx(SELECT_OTR | LOAD_REG);   // Transfer CNTR to OTR in "parallel"
;PCODE: $000008F5 VOL: 0
;PCODE: $000008F6 VOL: 0
;PCODE: $000008F7 VOL: 0
; 0000 059A             LS7366_SS_L_H
;PCODE: $000008F8 VOL: 0
;PCODE: $000008F9 VOL: 1
; 0000 059B             LS7366_SS_H_L                           //
;PCODE: $000008FA VOL: 0
;PCODE: $000008FB VOL: 1
; 0000 059C             spid_master_tx_rx(SELECT_OTR | RD_REG);     // Read 4 Bytes OTR Register
;PCODE: $000008FC VOL: 0
;PCODE: $000008FD VOL: 0
;PCODE: $000008FE VOL: 0
; 0000 059D             a = spid_master_tx_rx(0x00);            // B31 - B24  MSB
;PCODE: $000008FF VOL: 0
;PCODE: $00000900 VOL: 0
;PCODE: $00000901 VOL: 0
;PCODE: $00000902 VOL: 0
; 0000 059E             b = spid_master_tx_rx(0x00);            // B23 - B16
;PCODE: $00000903 VOL: 0
;PCODE: $00000904 VOL: 0
;PCODE: $00000905 VOL: 0
;PCODE: $00000906 VOL: 0
; 0000 059F             c = spid_master_tx_rx(0x00);            // B15 - B08
;PCODE: $00000907 VOL: 0
;PCODE: $00000908 VOL: 0
;PCODE: $00000909 VOL: 0
;PCODE: $0000090A VOL: 0
; 0000 05A0             d = spid_master_tx_rx(0x00);            // B07 - B00  LSB
;PCODE: $0000090B VOL: 0
;PCODE: $0000090C VOL: 0
;PCODE: $0000090D VOL: 0
;PCODE: $0000090E VOL: 0
; 0000 05A1             LS7366_SS_L_H
;PCODE: $0000090F VOL: 0
;PCODE: $00000910 VOL: 1
; 0000 05A2 
; 0000 05A3             sum = ( ((0x000000ffL & a) << 24) | ((0x000000ffL & b) << 16) | ((0x000000ffL & c) << 8) | (0x0000ffffL & d) );
;PCODE: $00000911 VOL: 0
;PCODE: $00000912 VOL: 0
;PCODE: $00000913 VOL: 0
;PCODE: $00000914 VOL: 0
;PCODE: $00000915 VOL: 0
;PCODE: $00000916 VOL: 0
;PCODE: $00000917 VOL: 0
;PCODE: $00000918 VOL: 0
;PCODE: $00000919 VOL: 0
;PCODE: $0000091A VOL: 0
;PCODE: $0000091B VOL: 0
;PCODE: $0000091C VOL: 0
;PCODE: $0000091D VOL: 0
;PCODE: $0000091E VOL: 0
;PCODE: $0000091F VOL: 0
;PCODE: $00000920 VOL: 0
;PCODE: $00000921 VOL: 0
;PCODE: $00000922 VOL: 0
;PCODE: $00000923 VOL: 0
;PCODE: $00000924 VOL: 0
;PCODE: $00000925 VOL: 0
;PCODE: $00000926 VOL: 0
;PCODE: $00000927 VOL: 0
;PCODE: $00000928 VOL: 0
;PCODE: $00000929 VOL: 0
;PCODE: $0000092A VOL: 0
;PCODE: $0000092B VOL: 0
; 0000 05A4             sprintf(ch,"%4.3fM",sum*0.314/500);     // 1¹ÙÄû¿¡ 0.314m
;PCODE: $0000092C VOL: 0
;PCODE: $0000092D VOL: 0
;PCODE: $0000092E VOL: 0
;PCODE: $0000092F VOL: 0
;PCODE: $00000930 VOL: 0
;PCODE: $00000931 VOL: 0
;PCODE: $00000932 VOL: 0
;PCODE: $00000933 VOL: 0
;PCODE: $00000934 VOL: 0
;PCODE: $00000935 VOL: 0
;PCODE: $00000936 VOL: 0
;PCODE: $00000937 VOL: 0
;PCODE: $00000938 VOL: 0
;PCODE: $00000939 VOL: 0
;PCODE: $0000093A VOL: 0
;PCODE: $0000093B VOL: 0
;PCODE: $0000093C VOL: 0
; 0000 05A5             delay_us(500);
;PCODE: $0000093D VOL: 0
; 0000 05A6             for(i=0;i<30;i++)
;PCODE: $0000093E VOL: 0
;PCODE: $0000093F VOL: 0
;PCODE: $00000940 VOL: 0
;PCODE: $00000941 VOL: 0
;PCODE: $00000942 VOL: 0
;PCODE: $00000943 VOL: 0
;PCODE: $00000944 VOL: 0
;PCODE: $00000945 VOL: 0
;PCODE: $00000946 VOL: 0
; 0000 05A7             {
; 0000 05A8                 if(ch[i]==temp[i]) ttemp++;
;PCODE: $00000947 VOL: 0
;PCODE: $00000948 VOL: 0
;PCODE: $00000949 VOL: 0
;PCODE: $0000094A VOL: 0
;PCODE: $0000094B VOL: 0
;PCODE: $0000094C VOL: 0
;PCODE: $0000094D VOL: 0
;PCODE: $0000094E VOL: 0
;PCODE: $0000094F VOL: 0
;PCODE: $00000950 VOL: 0
;PCODE: $00000951 VOL: 0
;PCODE: $00000952 VOL: 0
; 0000 05A9             }
;PCODE: $00000953 VOL: 0
;PCODE: $00000954 VOL: 0
;PCODE: $00000955 VOL: 0
;PCODE: $00000956 VOL: 0
;PCODE: $00000957 VOL: 0
;PCODE: $00000958 VOL: 0
; 0000 05AA             if(ttemp != 30)   putstringc1(ch);       // 10ms°£°Ý »çÀÌ¿¡ ¼ýÀÚº¯È­°¡ ÀÖÀ¸¸é È­¸é¿¡ Ãâ·Â
;PCODE: $00000959 VOL: 0
;PCODE: $0000095A VOL: 0
;PCODE: $0000095B VOL: 0
;PCODE: $0000095C VOL: 0
;PCODE: $0000095D VOL: 0
;PCODE: $0000095E VOL: 0
; 0000 05AB             ttemp=0;
;PCODE: $0000095F VOL: 0
;PCODE: $00000960 VOL: 0
;PCODE: $00000961 VOL: 0
; 0000 05AC 
; 0000 05AD          }
; 0000 05AE       }
;PCODE: $00000962 VOL: 0
;PCODE: $00000963 VOL: 0
;PCODE: $00000964 VOL: 0
; 0000 05AF }
;PCODE: $00000965 VOL: 0
;PCODE: $00000966 VOL: 0
;PCODE: $00000967 VOL: 0

	.DSEG
_0xB8:
	.BYTE 0x12
